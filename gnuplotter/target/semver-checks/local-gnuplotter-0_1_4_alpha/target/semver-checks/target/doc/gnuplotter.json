{"root":"0:0:1762","crate_version":"0.1.4-alpha","includes_private":true,"index":{"2:12616:18059":{"id":"2:12616:18059","crate_id":2,"name":"is_ascii","span":null,"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5539:18057":{"id":"5:5539:18057","crate_id":5,"name":"to_ascii_lowercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"2:12620:18055"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12579:25957":{"id":"2:12579:25957","crate_id":2,"name":"match_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"2:12191:7927","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:11463:453","str::rmatch_indices":"2:12582:25958"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"MatchIndices","id":"2:43842:7942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12535:18480":{"id":"2:12535:18480","crate_id":2,"name":"ends_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12567:18476":{"id":"2:12567:18476","crate_id":2,"name":"split_once","span":null,"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41664:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12599:18481":{"id":"2:12599:18481","crate_id":2,"name":"strip_prefix","span":null,"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["prefix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41664:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5535:26632":{"id":"5:5535:26632","crate_id":5,"name":"to_uppercase","span":null,"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12621:25969":{"id":"2:12621:25969","crate_id":2,"name":"escape_debug","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"2:4573:25969"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDebug","id":"2:43991:7938","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5519":{"id":"5:5519","crate_id":5,"name":null,"span":null,"visibility":"default","docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["5:5520:26629","5:5521:8262","5:5524:26630","5:5527:26631","5:5535:26632","5:5536:26633","5:5537:2429","5:5538:18058","5:5539:18057"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12521:23819":{"id":"2:12521:23819","crate_id":2,"name":"chars","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:11463:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Chars","id":"2:43662:7934","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12532:18479":{"id":"2:12532:18479","crate_id":2,"name":"starts_with","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12591:25962":{"id":"2:12591:25962","crate_id":2,"name":"trim_left","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12592:25963":{"id":"2:12592:25963","crate_id":2,"name":"trim_right","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5521:8262":{"id":"5:5521:8262","crate_id":5,"name":"replace","span":null,"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["from",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12500:25948":{"id":"2:12500:25948","crate_id":2,"name":"floor_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12582:25958":{"id":"2:12582:25958","crate_id":2,"name":"rmatch_indices","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"self::pattern":"2:12191:7927","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:11463:453","str::match_indices":"2:12579:25957"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatchIndices","id":"2:43860:7943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12617:18202":{"id":"2:12617:18202","crate_id":2,"name":"as_ascii","span":null,"visibility":"public","docs":"If this string slice [`is_ascii`](Self::is_ascii), returns it as a slice\nof [ASCII characters](`ascii::Char`), otherwise returns `None`.","links":{"`ascii::Char`":"2:39613:18337","Self::is_ascii":"2:12616:18059"},"attrs":["#[unstable(feature = \"ascii_char\", issue = \"110998\")]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Option","id":"2:41664:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"resolved_path":{"name":"AsciiChar","id":"2:39613:18337","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12498:2037":{"id":"2:12498:2037","crate_id":2,"name":"is_empty","span":null,"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12522:24255":{"id":"2:12522:24255","crate_id":2,"name":"char_indices","span":null,"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the previous character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:11463:453"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"CharIndices","id":"2:43668:7933","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12585:25959":{"id":"2:12585:25959","crate_id":2,"name":"trim","span":null,"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12520:18459":{"id":"2:12520:18459","crate_id":2,"name":"split_at_mut","span":null,"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"2:12519:18458"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5536:26633":{"id":"5:5536:26633","crate_id":5,"name":"into_string","span":null,"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"5:276:2021","`String`":"5:7490:251"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2021","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12502:25949":{"id":"2:12502:25949","crate_id":2,"name":"ceil_char_boundary","span":null,"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nIf `index` is greater than the length of the string, this returns the length of the string.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"2:12500:25948"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12576:25956":{"id":"2:12576:25956","crate_id":2,"name":"rmatches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"2:12191:7927","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:11463:453","str::matches":"2:12573:1993"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RMatches","id":"2:43914:7945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12623:2202":{"id":"2:12623:2202","crate_id":2,"name":"escape_default","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"2:4574:2202"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeDefault","id":"2:44000:2203","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12511:18433":{"id":"2:12511:18433","crate_id":2,"name":"get_mut","span":null,"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"2:41666:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41664:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10281:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10281:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12525:23813":{"id":"2:12525:23813","crate_id":2,"name":"split_ascii_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"2:12524:23766"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitAsciiWhitespace","id":"2:43975:7929","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12538:2078":{"id":"2:12538:2078","crate_id":2,"name":"find","span":null,"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"2:41666:199","prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41664:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12509:18432":{"id":"2:12509:18432","crate_id":2,"name":"get","span":null,"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"2:41666:199"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"resolved_path":{"name":"Option","id":"2:41664:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10281:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10281:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12499:25947":{"id":"2:12499:25947","crate_id":2,"name":"is_char_boundary","span":null,"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["index",{"primitive":"usize"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5538:18058":{"id":"5:5538:18058","crate_id":5,"name":"to_ascii_uppercase","span":null,"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"2:12619:18056"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:0:1762":{"id":"0:0:1762","crate_id":0,"name":"gnuplotter","span":{"filename":"/Users/jamescauwelier/Projects/accelerated-dev-llc/ergodic-cloud/gnuplotter/src/lib.rs","begin":[1,0],"end":[13,1]},"visibility":"public","docs":null,"links":{},"attrs":["#![deny(warnings)]","#![allow(dead_code, unused_imports)]"],"deprecation":null,"inner":{"module":{"is_crate":true,"items":["0:3:1759"],"is_stripped":false}}},"2:12507:345":{"id":"2:12507:345","crate_id":2,"name":"as_ptr","span":null,"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"str::as_mut_ptr":"2:12508:344","`u8`":"1:11480:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":false,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12552:18470":{"id":"2:12552:18470","crate_id":2,"name":"rsplit","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"self::pattern":"2:12191:7927","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:11463:453","str::split":"2:12546:18466"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplit","id":"2:43710:7912","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12523:18030":{"id":"2:12523:18030","crate_id":2,"name":"bytes","span":null,"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Bytes","id":"2:43678:2405","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12561:18472":{"id":"2:12561:18472","crate_id":2,"name":"splitn","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927","str::rsplitn":"2:12564:18474"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitN","id":"2:43796:7916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12528:23820":{"id":"2:12528:23820","crate_id":2,"name":"encode_utf16","span":null,"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EncodeUtf16","id":"2:43984:7928","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12526:23574":{"id":"2:12526:23574","crate_id":2,"name":"lines","span":null,"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nNote that any carriage return (`\\r`) not immediately followed by a\nline feed (`\\n`) does not split a line. These carriage returns are\nthereby included in the produced lines.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\r\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\n// Trailing carriage return is included in the last line\nassert_eq!(Some(\"baz\\r\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line does not require any ending:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Lines","id":"2:43946:2402","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5527:26631":{"id":"5:5527:26631","crate_id":5,"name":"to_lowercase","span":null,"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12611:25968":{"id":"2:12611:25968","crate_id":2,"name":"trim_right_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12618:18060":{"id":"2:12618:18060","crate_id":2,"name":"eq_ignore_ascii_case","span":null,"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["other",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12614:8349":{"id":"2:12614:8349","crate_id":2,"name":"parse","span":null,"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"2:12152:132","`FromStr`":"2:12151:2555"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"Result","id":"2:41809:234","args":{"angle_bracketed":{"args":[{"type":{"generic":"F"}},{"type":{"qualified_path":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"F"},"trait":{"name":"FromStr","id":"2:12151:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"2:12151:2555","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12593:25964":{"id":"2:12593:25964","crate_id":2,"name":"trim_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"2:12216:7922","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12624:25970":{"id":"2:12624:25970","crate_id":2,"name":"escape_unicode","span":null,"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"2:4571:25970"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"EscapeUnicode","id":"2:44009:7939","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12620:18055":{"id":"2:12620:18055","crate_id":2,"name":"make_ascii_lowercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5537:2429":{"id":"5:5537:2429","crate_id":5,"name":"repeat","span":null,"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12497:875":{"id":"2:12497:875","crate_id":2,"name":"len","span":null,"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:11463:453"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"primitive":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12573:1993":{"id":"2:12573:1993","crate_id":2,"name":"matches","span":null,"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::rmatches\n\n# Examples\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"2:12191:7927","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:11463:453","str::rmatches":"2:12576:25956"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Matches","id":"2:43896:7944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12517:25951":{"id":"2:12517:25951","crate_id":2,"name":"slice_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:11469:1510","str::slice_mut_unchecked":"2:12518:25952","crate::ops::Index":"2:3073:2282"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12529:18478":{"id":"2:12529:18478","crate_id":2,"name":"contains","span":null,"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"primitive":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12515:18435":{"id":"2:12515:18435","crate_id":2,"name":"get_unchecked_mut","span":null,"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10281:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10281:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12587:25960":{"id":"2:12587:25960","crate_id":2,"name":"trim_start","span":null,"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12506:25950":{"id":"2:12506:25950","crate_id":2,"name":"as_bytes_mut","span":null,"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12596:25965":{"id":"2:12596:25965","crate_id":2,"name":"trim_start_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"0:3:1759":{"id":"0:3:1759","crate_id":0,"name":"hello","span":{"filename":"/Users/jamescauwelier/Projects/accelerated-dev-llc/ergodic-cloud/gnuplotter/src/lib.rs","begin":[11,0],"end":[13,1]},"visibility":"crate","docs":"A sample documentation test\n\n# Example\n\n```\nassert!(true);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12513:18434":{"id":"2:12513:18434","crate_id":2,"name":"get_unchecked","span":null,"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["i",{"generic":"I"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"qualified_path":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"I"},"trait":{"name":"SliceIndex","id":"2:10281:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"2:10281:247","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"2:12549:18468":{"id":"2:12549:18468","crate_id":2,"name":"split_inclusive","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitInclusive","id":"2:12007:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12570:18477":{"id":"2:12570:18477","crate_id":2,"name":"rsplit_once","span":null,"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["delimiter",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41664:201","args":{"angle_bracketed":{"args":[{"type":{"tuple":[{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12602:18482":{"id":"2:12602:18482","crate_id":2,"name":"strip_suffix","span":null,"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["suffix",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41664:201","args":{"angle_bracketed":{"args":[{"type":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12558:25955":{"id":"2:12558:25955","crate_id":2,"name":"rsplit_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"self::pattern":"2:12191:7927","str::split":"2:12546:18466","prim@char":"1:11463:453","str::split_terminator":"2:12555:25954"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitTerminator","id":"2:43760:7946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12518:25952":{"id":"2:12518:25952","crate_id":2,"name":"slice_mut_unchecked","span":null,"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"`str`":"1:11469:1510","crate::ops::IndexMut":"2:3077:2283","str::slice_unchecked":"2:12517:25951"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}],["begin",{"primitive":"usize"}],["end",{"primitive":"usize"}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}}},"5:5520:26629":{"id":"5:5520:26629","crate_id":5,"name":"into_boxed_bytes","span":null,"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"resolved_path":{"name":"Box","id":"5:276:2021","args":{"angle_bracketed":{"args":[{"type":{"primitive":"str"}}],"bindings":[]}}}}]],"output":{"resolved_path":{"name":"Box","id":"5:276:2021","args":{"angle_bracketed":{"args":[{"type":{"slice":{"primitive":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12605:25966":{"id":"2:12605:25966","crate_id":2,"name":"trim_end_matches","span":null,"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12508:344":{"id":"2:12508:344","crate_id":2,"name":"as_mut_ptr","span":null,"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:11480:1616"},"attrs":["#[rustc_never_returns_null_ptr]","#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":{"raw_pointer":{"mutable":true,"type":{"primitive":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12546:18466":{"id":"2:12546:18466","crate_id":2,"name":"split","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"self::pattern":"2:12191:7927","`DoubleEndedIterator`":"2:7571:126","prim@char":"1:11463:453","str::split_whitespace":"2:12524:23766","str::rsplit":"2:12552:18470"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Split","id":"2:43692:2406","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12564:18474":{"id":"2:12564:18474","crate_id":2,"name":"rsplitn","span":null,"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"prim@char":"1:11463:453","str::splitn":"2:12561:18472","self::pattern":"2:12191:7927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["n",{"primitive":"usize"}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"RSplitN","id":"2:43814:7914","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12619:18056":{"id":"2:12619:18056","crate_id":2,"name":"make_ascii_uppercase","span":null,"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":true,"type":{"generic":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"5:5524:26630":{"id":"5:5524:26630","crate_id":5,"name":"replacen","span":null,"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match, it returns this string slice as [`String`]:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"5:7490:251"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}],["to",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}],["count",{"primitive":"usize"}]],"output":{"resolved_path":{"name":"String","id":"5:7490:251","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12519:18458":{"id":"2:12519:18458","crate_id":2,"name":"split_at","span":null,"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"2:12520:18459"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}],["mid",{"primitive":"usize"}]],"output":{"tuple":[{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12555:25954":{"id":"2:12555:25954","crate_id":2,"name":"split_terminator","span":null,"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"2:12191:7927","str::split":"2:12546:18466","prim@char":"1:11463:453","`DoubleEndedIterator`":"2:7571:126","str::rsplit_terminator":"2:12558:25955"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"SplitTerminator","id":"2:43742:7947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"generic":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12608:25967":{"id":"2:12608:25967","crate_id":2,"name":"trim_left_matches","span":null,"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12589:25961":{"id":"2:12589:25961","crate_id":2,"name":"trim_end","span":null,"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"primitive":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12542:2036":{"id":"2:12542:2036","crate_id":2,"name":"rfind","span":null,"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"`None`":"2:41666:199","prim@char":"1:11463:453","self::pattern":"2:12191:7927"},"attrs":[],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":"'a","mutable":false,"type":{"generic":"Self"}}}],["pat",{"generic":"P"}]],"output":{"resolved_path":{"name":"Option","id":"2:41664:201","args":{"angle_bracketed":{"args":[{"type":{"primitive":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"generic":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"qualified_path":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"generic":"P"},"trait":{"name":"Pattern","id":"2:12196:7923","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"2:12211:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12496":{"id":"2:12496","crate_id":2,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"inner":{"impl":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"primitive":"str"},"items":["2:12497:875","2:12498:2037","2:12499:25947","2:12500:25948","2:12502:25949","2:12505:19652","2:12506:25950","2:12507:345","2:12508:344","2:12509:18432","2:12511:18433","2:12513:18434","2:12515:18435","2:12517:25951","2:12518:25952","2:12519:18458","2:12520:18459","2:12521:23819","2:12522:24255","2:12523:18030","2:12524:23766","2:12525:23813","2:12526:23574","2:12527:25953","2:12528:23820","2:12529:18478","2:12532:18479","2:12535:18480","2:12538:2078","2:12542:2036","2:12546:18466","2:12549:18468","2:12552:18470","2:12555:25954","2:12558:25955","2:12561:18472","2:12564:18474","2:12567:18476","2:12570:18477","2:12573:1993","2:12576:25956","2:12579:25957","2:12582:25958","2:12585:25959","2:12587:25960","2:12589:25961","2:12591:25962","2:12592:25963","2:12593:25964","2:12596:25965","2:12599:18481","2:12602:18482","2:12605:25966","2:12608:25967","2:12611:25968","2:12614:8349","2:12616:18059","2:12617:18202","2:12618:18060","2:12619:18056","2:12620:18055","2:12621:25969","2:12623:2202","2:12624:25970"],"negative":false,"synthetic":false,"blanket_impl":null}}},"2:12527:25953":{"id":"2:12527:25953","crate_id":2,"name":"lines_any","span":null,"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\", suggestion =\n\"lines\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"LinesAny","id":"2:43956:7941","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12524:23766":{"id":"2:12524:23766","crate_id":2,"name":"split_whitespace","span":null,"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"2:12525:23813"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"resolved_path":{"name":"SplitWhitespace","id":"2:43966:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}},"2:12505:19652":{"id":"2:12505:19652","crate_id":2,"name":"as_bytes","span":null,"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"2:11751:7931"},"attrs":["#[must_use]"],"deprecation":null,"inner":{"function":{"decl":{"inputs":[["self",{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"generic":"Self"}}}]],"output":{"borrowed_ref":{"lifetime":null,"mutable":false,"type":{"slice":{"primitive":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}}}},"paths":{"17:13890:17833":{"crate_id":17,"path":["object","pe","ImageAuxSymbolCrc"],"kind":"struct"},"1:4560:2479":{"crate_id":1,"path":["std","os","fd","raw","AsRawFd"],"kind":"trait"},"1:1840:2305":{"crate_id":1,"path":["std","env","Args"],"kind":"struct"},"6:4073:11880":{"crate_id":6,"path":["libc","unix","bsd","apple","segment_command"],"kind":"struct"},"1:9247:2369":{"crate_id":1,"path":["std","sys","unix","fs","ReadDir"],"kind":"struct"},"11:693:2041":{"crate_id":11,"path":["hashbrown","map","IntoIter"],"kind":"struct"},"16:7660:13412":{"crate_id":16,"path":["gimli","read","rnglists","RawRange"],"kind":"struct"},"16:7054:28795":{"crate_id":16,"path":["gimli","read","lookup","LookupEntryIter"],"kind":"struct"},"17:9886:13548":{"crate_id":17,"path":["object","read","archive","ArchiveMemberIterator"],"kind":"struct"},"6:4026:11875":{"crate_id":6,"path":["libc","unix","bsd","apple","proc_taskallinfo"],"kind":"struct"},"5:4849:225":{"crate_id":5,"path":["alloc","rc","Rc"],"kind":"struct"},"6:3611:11846":{"crate_id":6,"path":["libc","unix","bsd","apple","aiocb"],"kind":"struct"},"2:12262:7951":{"crate_id":2,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"6:3703:11852":{"crate_id":6,"path":["libc","unix","bsd","apple","siginfo_t"],"kind":"struct"},"1:7958:2372":{"crate_id":1,"path":["std","io","IoSlice"],"kind":"struct"},"16:7128:13394":{"crate_id":16,"path":["gimli","read","op","Operation"],"kind":"enum"},"2:11721:8476":{"crate_id":2,"path":["core","slice","SlicePattern"],"kind":"trait"},"6:4400:11914":{"crate_id":6,"path":["libc","unix","bsd","apple","rusage_info_v1"],"kind":"struct"},"7:30:12121":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Reason_Code"],"kind":"enum"},"6:4622:11681":{"crate_id":6,"path":["libc","unix","bsd","apple","statfs"],"kind":"struct"},"6:4526:11919":{"crate_id":6,"path":["libc","unix","bsd","apple","attrlist"],"kind":"struct"},"2:40902:8216":{"crate_id":2,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"17:10929:13670":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentInternal"],"kind":"struct"},"11:731:2237":{"crate_id":11,"path":["hashbrown","map","IntoValues"],"kind":"struct"},"17:11173:13754":{"crate_id":17,"path":["object","read","pe","export","ExportTarget"],"kind":"enum"},"5:7331:2041":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","IntoIter"],"kind":"struct"},"5:687:115":{"crate_id":5,"path":["alloc","borrow","Cow"],"kind":"enum"},"6:5198:12097":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","x86_64","__darwin_x86_float_state64"],"kind":"struct"},"5:3332:2234":{"crate_id":5,"path":["alloc","collections","btree","set","ExtractIf"],"kind":"struct"},"1:727:152":{"crate_id":1,"path":["std","collections","hash","map","HashMap"],"kind":"struct"},"2:21201:8303":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","from_exposed_addr"],"kind":"foreign_type"},"1:3963:2467":{"crate_id":1,"path":["std","os","unix","fs","OpenOptionsExt"],"kind":"trait"},"6:62:8760":{"crate_id":6,"path":["libc","unix","DIR"],"kind":"enum"},"2:44256:7964":{"crate_id":2,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"17:12531:17056":{"crate_id":17,"path":["object","macho","LoadCommand"],"kind":"struct"},"1:8802:21225":{"crate_id":1,"path":["std","sync","mpmc","list","ListToken"],"kind":"struct"},"6:4606:11927":{"crate_id":6,"path":["libc","unix","bsd","apple","proc_threadinfo"],"kind":"struct"},"6:542:9140":{"crate_id":6,"path":["libc","unix","iovec"],"kind":"struct"},"6:5258:12100":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","x86_64","malloc_introspection_t"],"kind":"struct"},"1:10300:20251":{"crate_id":1,"path":["std","sys","unix","fd","FileDesc"],"kind":"struct"},"17:10023:13520":{"crate_id":17,"path":["object","read","coff","symbol","SymbolIterator"],"kind":"struct"},"17:12007:16555":{"crate_id":17,"path":["object","elf","CompressionHeader64"],"kind":"struct"},"11:389:28439":{"crate_id":11,"path":["hashbrown","raw","RawDrain"],"kind":"struct"},"5:1428:2230":{"crate_id":5,"path":["alloc","collections","btree","map","IterMut"],"kind":"struct"},"1:884:2232":{"crate_id":1,"path":["std","collections","hash","map","Values"],"kind":"struct"},"16:2810:12426":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsIndex"],"kind":"struct"},"6:3790:11860":{"crate_id":6,"path":["libc","unix","bsd","apple","sockaddr_in"],"kind":"struct"},"17:10588:13655":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsection"],"kind":"struct"},"17:13567:17815":{"crate_id":17,"path":["object","pe","ImageDataDirectory"],"kind":"struct"},"2:30366:24223":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"6:4159:11888":{"crate_id":6,"path":["libc","unix","bsd","apple","ipc_perm"],"kind":"struct"},"1:7651:2368":{"crate_id":1,"path":["std","fs","Metadata"],"kind":"struct"},"15:288:12354":{"crate_id":15,"path":["addr2line","LocationRangeIter"],"kind":"struct"},"2:44000:2203":{"crate_id":2,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"2:7992:8219":{"crate_id":2,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"6:4897:11951":{"crate_id":6,"path":["libc","unix","bsd","apple","__c_anonymous_ifk_data"],"kind":"union"},"1:7514:2212":{"crate_id":1,"path":["std","backtrace","BacktraceStatus"],"kind":"enum"},"16:7342:28902":{"crate_id":16,"path":["gimli","read","op","EvaluationState"],"kind":"enum"},"1:5214:2562":{"crate_id":1,"path":["std","process","ChildStdout"],"kind":"struct"},"17:11235:13756":{"crate_id":17,"path":["object","read","pe","import","ImportThunkList"],"kind":"struct"},"17:9607:13518":{"crate_id":17,"path":["object","read","any","ComdatSectionIterator"],"kind":"struct"},"2:3028:228":{"crate_id":2,"path":["core","ops","deref","Receiver"],"kind":"trait"},"1:8880:242":{"crate_id":1,"path":["std","sync","rwlock","RwLockReadGuard"],"kind":"struct"},"13:226:28463":{"crate_id":13,"path":["std_detect","detect","cache","Initializer"],"kind":"struct"},"2:15:1996":{"crate_id":2,"path":["core","write"],"kind":"macro"},"17:13792:17825":{"crate_id":17,"path":["object","pe","ImageSymbolBytes"],"kind":"struct"},"5:1778:2234":{"crate_id":5,"path":["alloc","collections","btree","map","ExtractIf"],"kind":"struct"},"1:10345:135":{"crate_id":1,"path":["std","sys","unix","fs","FileType"],"kind":"struct"},"1:6443:241":{"crate_id":1,"path":["std","sync","rwlock","RwLock"],"kind":"struct"},"1:7812:2418":{"crate_id":1,"path":["std","io","error","ErrorKind"],"kind":"enum"},"2:10633:7912":{"crate_id":2,"path":["core","slice","iter","RSplit"],"kind":"struct"},"6:574:9145":{"crate_id":6,"path":["libc","unix","itimerval"],"kind":"struct"},"2:9996:8489":{"crate_id":2,"path":["core","slice","sort","InsertionHole"],"kind":"struct"},"2:9418:7858":{"crate_id":2,"path":["core","fmt","builders","FormatterFn"],"kind":"struct"},"2:21243:2660":{"crate_id":2,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"17:13973:17840":{"crate_id":17,"path":["object","pe","ImageThunkData64"],"kind":"struct"},"6:527:9138":{"crate_id":6,"path":["libc","unix","ipv6_mreq"],"kind":"struct"},"2:40474:8240":{"crate_id":2,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"6:4869:11947":{"crate_id":6,"path":["libc","unix","bsd","apple","log2phys"],"kind":"struct"},"2:21909:25298":{"crate_id":2,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"6:4135:11885":{"crate_id":6,"path":["libc","unix","bsd","apple","sockaddr_ctl"],"kind":"struct"},"11:703:2236":{"crate_id":11,"path":["hashbrown","map","IntoKeys"],"kind":"struct"},"17:12305:16576":{"crate_id":17,"path":["object","elf","GnuHashHeader"],"kind":"struct"},"2:40422:8245":{"crate_id":2,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"2:45961:2674":{"crate_id":2,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"6:4665:11930":{"crate_id":6,"path":["libc","unix","bsd","apple","pthread_mutex_t"],"kind":"struct"},"2:2943:8288":{"crate_id":2,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"17:12790:17073":{"crate_id":17,"path":["object","macho","RoutinesCommand32"],"kind":"struct"},"1:1779:2288":{"crate_id":1,"path":["std","env","Vars"],"kind":"struct"},"1:646:2209":{"crate_id":1,"path":["std","backtrace","BytesOrWide"],"kind":"enum"},"6:4786:11943":{"crate_id":6,"path":["libc","unix","bsd","apple","if_data64"],"kind":"struct"},"16:5435:28823":{"crate_id":16,"path":["gimli","read","util","sealed","CapacityFull"],"kind":"struct"},"17:12658:17063":{"crate_id":17,"path":["object","macho","FvmlibCommand"],"kind":"struct"},"1:9681:2299":{"crate_id":1,"path":["std","sys","unix","os","SplitPaths"],"kind":"struct"},"11:1036:2245":{"crate_id":11,"path":["hashbrown","map","VacantEntry"],"kind":"struct"},"17:14269:17863":{"crate_id":17,"path":["object","pe","ImageHotPatchInfo"],"kind":"struct"},"17:12123:16563":{"crate_id":17,"path":["object","elf","Rela64"],"kind":"struct"},"5:7262:2257":{"crate_id":5,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"17:434:12378":{"crate_id":17,"path":["object","read","any","Section"],"kind":"struct"},"17:11244:13533":{"crate_id":17,"path":["object","read","pe","import","Import"],"kind":"enum"},"11:1842:2229":{"crate_id":11,"path":["hashbrown","set","Iter"],"kind":"struct"},"2:1642:8200":{"crate_id":2,"path":["core","mem","Discriminant"],"kind":"struct"},"16:7677:218":{"crate_id":16,"path":["gimli","read","rnglists","Range"],"kind":"struct"},"2:11956:8523":{"crate_id":2,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"5:7390:2228":{"crate_id":5,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"17:14316:17867":{"crate_id":17,"path":["object","pe","ImageArm64RuntimeFunctionEntry"],"kind":"struct"},"17:9242:13512":{"crate_id":17,"path":["object","endian","I32Bytes"],"kind":"struct"},"16:7613:13409":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListIter"],"kind":"struct"},"18:736:17910":{"crate_id":18,"path":["memchr","memmem","SearcherKind"],"kind":"enum"},"17:11742:13538":{"crate_id":17,"path":["object","read","CompressedFileRange"],"kind":"struct"},"16:4557:12977":{"crate_id":16,"path":["gimli","constants","DwEnd"],"kind":"struct"},"5:7515:7970":{"crate_id":5,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"16:6531:13374":{"crate_id":16,"path":["gimli","read","index","UnitIndexSectionIterator"],"kind":"struct"},"17:2012:13601":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolIterator"],"kind":"struct"},"2:43760:7946":{"crate_id":2,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"11:2487:28444":{"crate_id":11,"path":["hashbrown","raw","TableLayout"],"kind":"struct"},"1:10894:20924":{"crate_id":1,"path":["std","sys_common","wtf8","EncodeWide"],"kind":"struct"},"16:3915:12503":{"crate_id":16,"path":["gimli","constants","DwChildren"],"kind":"struct"},"1:11125:12363":{"crate_id":1,"path":["std","backtrace_rs","backtrace","libunwind","Frame"],"kind":"enum"},"5:3671:27033":{"crate_id":5,"path":["alloc","collections","linked_list","drop","DropGuard"],"kind":"struct"},"2:41395:168":{"crate_id":2,"path":["core","net","ip_addr","IpAddr"],"kind":"enum"},"15:306:12355":{"crate_id":15,"path":["addr2line","LocationRangeUnitIter"],"kind":"struct"},"6:4089:11881":{"crate_id":6,"path":["libc","unix","bsd","apple","segment_command_64"],"kind":"struct"},"17:13739:17824":{"crate_id":17,"path":["object","pe","AnonObjectHeaderBigobj"],"kind":"struct"},"2:43896:7944":{"crate_id":2,"path":["core","str","iter","Matches"],"kind":"struct"},"17:11547:13530":{"crate_id":17,"path":["object","read","SymbolMapName"],"kind":"struct"},"2:1826:186":{"crate_id":2,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"6:4876:11948":{"crate_id":6,"path":["libc","unix","bsd","apple","os_unfair_lock_s"],"kind":"struct"},"16:6386:13365":{"crate_id":16,"path":["gimli","read","abbrev","AttributeSpecification"],"kind":"struct"},"17:12184:16567":{"crate_id":17,"path":["object","elf","Dyn64"],"kind":"struct"},"16:3049:12434":{"crate_id":16,"path":["gimli","common","DwarfFileType"],"kind":"enum"},"1:7529:2213":{"crate_id":1,"path":["std","backtrace","RawFrame"],"kind":"enum"},"2:3244:262":{"crate_id":2,"path":["core","ops","try_trait","Try"],"kind":"trait"},"17:9780:13522":{"crate_id":17,"path":["object","read","any","SectionRelocationIterator"],"kind":"struct"},"2:3010:122":{"crate_id":2,"path":["core","ops","deref","Deref"],"kind":"trait"},"2:21452:2648":{"crate_id":2,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"17:12778:17072":{"crate_id":17,"path":["object","macho","ThreadCommand"],"kind":"struct"},"1:6265:2599":{"crate_id":1,"path":["std","sync","once_lock","OnceLock"],"kind":"struct"},"16:536:28486":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleMap"],"kind":"struct"},"1:3707:2452":{"crate_id":1,"path":["std","net","tcp","TcpStream"],"kind":"struct"},"17:11162:13718":{"crate_id":17,"path":["object","read","pe","data_directory","DataDirectories"],"kind":"struct"},"2:44466:127":{"crate_id":2,"path":["core","time","Duration"],"kind":"struct"},"2:40668:8244":{"crate_id":2,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:4241:2490":{"crate_id":1,"path":["std","os","unix","net","stream","UnixStream"],"kind":"struct"},"5:4988:2388":{"crate_id":5,"path":["alloc","rc","from_iter_exact","Guard"],"kind":"struct"},"1:7441:2197":{"crate_id":1,"path":["std","thread","local","AccessError"],"kind":"struct"},"1:11480:1616":{"crate_id":1,"path":["std","u8"],"kind":"primitive"},"17:11226:13755":{"crate_id":17,"path":["object","read","pe","import","ImportDescriptorIterator"],"kind":"struct"},"2:46450:24402":{"crate_id":2,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"2:23509:244":{"crate_id":2,"path":["core","num","saturating","Saturating"],"kind":"struct"},"2:20955:8061":{"crate_id":2,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"6:5297:12104":{"crate_id":6,"path":["libc","unix","bsd","apple","long_array","ctl_info"],"kind":"struct"},"16:5743:13341":{"crate_id":16,"path":["gimli","read","cfi","CfiEntriesIter"],"kind":"struct"},"9:486:12149":{"crate_id":9,"path":["miniz_oxide","DataFormat"],"kind":"enum"},"16:5588:13332":{"crate_id":16,"path":["gimli","read","cfi","DebugFrame"],"kind":"struct"},"1:10584:20884":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnFileActions"],"kind":"struct"},"1:4763:2526":{"crate_id":1,"path":["std","panic","always_abort"],"kind":"function"},"2:45983:2680":{"crate_id":2,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"17:3565:13691":{"crate_id":17,"path":["object","read","macho","relocation","MachORelocationIterator"],"kind":"struct"},"17:12997:17085":{"crate_id":17,"path":["object","macho","RpathCommand"],"kind":"struct"},"2:2935:8286":{"crate_id":2,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"2:45798:2673":{"crate_id":2,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:10696:8532":{"crate_id":1,"path":["std","sys","unix","time","Nanoseconds"],"kind":"struct"},"17:12810:17074":{"crate_id":17,"path":["object","macho","RoutinesCommand64"],"kind":"struct"},"2:4801:422":{"crate_id":2,"path":["core","ffi","c_void"],"kind":"enum"},"2:39321:223":{"crate_id":2,"path":["core","ops","range","RangeTo"],"kind":"struct"},"2:45752:2707":{"crate_id":2,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"2:6081:8246":{"crate_id":2,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"2:30900:203":{"crate_id":2,"path":["core","cmp","Ordering"],"kind":"enum"},"17:11367:13726":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderInfo"],"kind":"struct"},"17:11295:13758":{"crate_id":17,"path":["object","read","pe","relocation","RelocationIterator"],"kind":"struct"},"2:39343:222":{"crate_id":2,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:6229:2593":{"crate_id":1,"path":["std","sync","once","OnceState"],"kind":"struct"},"2:43470:7901":{"crate_id":2,"path":["core","slice","iter","Windows"],"kind":"struct"},"16:6243:13356":{"crate_id":16,"path":["gimli","read","dwarf","Unit"],"kind":"struct"},"5:4350:273":{"crate_id":5,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:7970:2376":{"crate_id":1,"path":["std","io","SeekFrom"],"kind":"enum"},"17:12208:16569":{"crate_id":17,"path":["object","elf","Verdef"],"kind":"struct"},"5:5976:2587":{"crate_id":5,"path":["alloc","sync","Weak"],"kind":"struct"},"1:8595:2569":{"crate_id":1,"path":["std","process","ExitStatus"],"kind":"struct"},"16:3032:12433":{"crate_id":16,"path":["gimli","common","DwoId"],"kind":"struct"},"17:13989:17842":{"crate_id":17,"path":["object","pe","ImageTlsDirectory64"],"kind":"struct"},"2:43984:7928":{"crate_id":2,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:4321:2494":{"crate_id":1,"path":["std","os","unix","process","CommandExt"],"kind":"trait"},"5:276:2021":{"crate_id":5,"path":["alloc","boxed","Box"],"kind":"struct"},"5:4365:27044":{"crate_id":5,"path":["alloc","collections","vec_deque","drop","Dropper"],"kind":"struct"},"2:40321:2403":{"crate_id":2,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"6:580:9146":{"crate_id":6,"path":["libc","unix","tms"],"kind":"struct"},"2:23062:192":{"crate_id":2,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"2:41740:2041":{"crate_id":2,"path":["core","option","IntoIter"],"kind":"struct"},"9:52:12169":{"crate_id":9,"path":["miniz_oxide","inflate","core","DecompressorOxide"],"kind":"struct"},"0:0:1762":{"crate_id":0,"path":["gnuplotter"],"kind":"module"},"16:7360:28900":{"crate_id":16,"path":["gimli","read","op","EvaluationWaiting"],"kind":"enum"},"2:42778:73":{"crate_id":2,"path":["core","fmt","rt","Argument"],"kind":"struct"},"2:48139:7822":{"crate_id":2,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"2:8661:2536":{"crate_id":2,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"16:2574:12416":{"crate_id":16,"path":["gimli","common","DebugLocListsBase"],"kind":"struct"},"2:4058:8431":{"crate_id":2,"path":["core","asserting","Printable"],"kind":"trait"},"5:3219:27117":{"crate_id":5,"path":["alloc","collections","btree","set","IntersectionInner"],"kind":"enum"},"1:10733:20227":{"crate_id":1,"path":["std","sys","unix","time","Timespec"],"kind":"struct"},"17:13575:17816":{"crate_id":17,"path":["object","pe","ImageOptionalHeader32"],"kind":"struct"},"1:3941:2465":{"crate_id":1,"path":["std","os","unix","fs","FileExt"],"kind":"trait"},"2:7027:23809":{"crate_id":2,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"2:21015:25499":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"2:41435:2443":{"crate_id":2,"path":["core","net","ip_addr","Ipv6Addr"],"kind":"struct"},"17:13071:17090":{"crate_id":17,"path":["object","macho","VersionMinCommand"],"kind":"struct"},"11:1862:2249":{"crate_id":11,"path":["hashbrown","set","Intersection"],"kind":"struct"},"18:574:29632":{"crate_id":18,"path":["memchr","memmem","twoway","Forward"],"kind":"struct"},"2:2277:108":{"crate_id":2,"path":["core","clone","Clone"],"kind":"trait"},"1:622:2205":{"crate_id":1,"path":["std","backtrace","Backtrace"],"kind":"struct"},"2:8660:2537":{"crate_id":2,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"9:237:2549":{"crate_id":9,"path":["miniz_oxide","inflate","core","State"],"kind":"enum"},"16:3888:12500":{"crate_id":16,"path":["gimli","constants","DwCfa"],"kind":"struct"},"11:101:28448":{"crate_id":11,"path":["hashbrown","raw","Bucket"],"kind":"struct"},"2:2618:121":{"crate_id":2,"path":["core","default","Default"],"kind":"trait"},"2:9832:151":{"crate_id":2,"path":["core","hash","Hash"],"kind":"trait"},"17:9051:13480":{"crate_id":17,"path":["object","endian","Endianness"],"kind":"enum"},"2:1761:8313":{"crate_id":2,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:558:2181":{"crate_id":1,"path":["std","thread","JoinHandle"],"kind":"struct"},"17:9488:29607":{"crate_id":17,"path":["object","read","any","SegmentInternal"],"kind":"enum"},"6:4298:11905":{"crate_id":6,"path":["libc","unix","bsd","apple","vm_range_t"],"kind":"struct"},"2:2925:8284":{"crate_id":2,"path":["core","ops","bit","Shr"],"kind":"trait"},"1:8754:21260":{"crate_id":1,"path":["std","sync","mpmc","array","ArrayToken"],"kind":"struct"},"17:9867:13547":{"crate_id":17,"path":["object","read","archive","ArchiveFile"],"kind":"struct"},"6:5165:12095":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","x86_64","__darwin_x86_exception_state64"],"kind":"struct"},"1:7807:21239":{"crate_id":1,"path":["std","io","error","Custom"],"kind":"struct"},"17:14173:17861":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory32"],"kind":"struct"},"6:1099:9544":{"crate_id":6,"path":["libc","unix","bsd","regex_t"],"kind":"struct"},"18:548:151":{"crate_id":18,"path":["memchr","memmem","rabinkarp","Hash"],"kind":"struct"},"1:8609:2570":{"crate_id":1,"path":["std","process","ExitStatusError"],"kind":"struct"},"2:1549:2388":{"crate_id":2,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"17:8926:13506":{"crate_id":17,"path":["object","common","FileFlags"],"kind":"enum"},"17:12945:17081":{"crate_id":17,"path":["object","macho","TwolevelHintsCommand"],"kind":"struct"},"2:2860:8272":{"crate_id":2,"path":["core","ops","arith","Div"],"kind":"trait"},"11:427:28456":{"crate_id":11,"path":["hashbrown","raw","RawIterHashInner"],"kind":"struct"},"5:2692:26998":{"crate_id":5,"path":["alloc","collections","btree","node","Handle"],"kind":"struct"},"2:30330:7987":{"crate_id":2,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"18:80:17896":{"crate_id":18,"path":["memchr","memchr","iter","Memchr"],"kind":"struct"},"1:2501:2414":{"crate_id":1,"path":["std","io","buffered","bufreader","BufReader"],"kind":"struct"},"2:45860:2708":{"crate_id":2,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"18:660:17912":{"crate_id":18,"path":["memchr","memmem","FindIter"],"kind":"struct"},"6:1048:9539":{"crate_id":6,"path":["libc","unix","bsd","fd_set"],"kind":"struct"},"16:2548:12415":{"crate_id":16,"path":["gimli","common","LocationListsOffset"],"kind":"struct"},"6:4580:11925":{"crate_id":6,"path":["libc","unix","bsd","apple","semid_ds"],"kind":"struct"},"2:41809:234":{"crate_id":2,"path":["core","result","Result"],"kind":"enum"},"2:12868:8069":{"crate_id":2,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"2:46991:2682":{"crate_id":2,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"16:2696:12421":{"crate_id":16,"path":["gimli","common","RangeListsOffset"],"kind":"struct"},"17:12024:16556":{"crate_id":17,"path":["object","elf","Sym32"],"kind":"struct"},"1:926:2238":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilderMut"],"kind":"struct"},"2:4416:8024":{"crate_id":2,"path":["core","cell","RefMut"],"kind":"struct"},"2:43946:2402":{"crate_id":2,"path":["core","str","iter","Lines"],"kind":"struct"},"5:4166:2388":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_fold","Guard"],"kind":"struct"},"1:11466:1120":{"crate_id":1,"path":["std","pointer"],"kind":"primitive"},"17:12554:17058":{"crate_id":17,"path":["object","macho","SegmentCommand32"],"kind":"struct"},"1:8133:2480":{"crate_id":1,"path":["std","os","fd","owned","BorrowedFd"],"kind":"struct"},"5:1525:2268":{"crate_id":5,"path":["alloc","collections","btree","map","RangeMut"],"kind":"struct"},"2:42321:95":{"crate_id":2,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"17:9390:134":{"crate_id":17,"path":["object","read","any","File"],"kind":"enum"},"2:2841:8252":{"crate_id":2,"path":["core","marker","FnPtr"],"kind":"trait"},"5:6817:7992":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDrop"],"kind":"struct"},"2:11239:7906":{"crate_id":2,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"17:11490:13527":{"crate_id":17,"path":["object","read","SymbolIndex"],"kind":"struct"},"2:2798:2188":{"crate_id":2,"path":["core","marker","PhantomData"],"kind":"struct"},"2:21320:2656":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr"],"kind":"trait"},"5:7378:2227":{"crate_id":5,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"2:43024:2549":{"crate_id":2,"path":["core","hash","sip","State"],"kind":"struct"},"16:6499:13372":{"crate_id":16,"path":["gimli","read","index","DebugTuIndex"],"kind":"struct"},"1:6409:2601":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutexGuard"],"kind":"struct"},"6:3870:11867":{"crate_id":6,"path":["libc","unix","bsd","apple","rt_metrics"],"kind":"struct"},"5:5945:71":{"crate_id":5,"path":["alloc","sync","Arc"],"kind":"struct"},"17:12237:16571":{"crate_id":17,"path":["object","elf","Verneed"],"kind":"struct"},"2:41868:2041":{"crate_id":2,"path":["core","result","IntoIter"],"kind":"struct"},"2:43227:8505":{"crate_id":2,"path":["core","slice","sort","TimSortRun"],"kind":"struct"},"1:7724:2416":{"crate_id":1,"path":["std","io","buffered","IntoInnerError"],"kind":"struct"},"17:14401:17873":{"crate_id":17,"path":["object","pe","ImageEnclaveImport"],"kind":"struct"},"2:10726:7914":{"crate_id":2,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"2:9625:7859":{"crate_id":2,"path":["core","fmt","Binary"],"kind":"trait"},"18:564:17925":{"crate_id":18,"path":["memchr","memmem","rarebytes","RareNeedleBytes"],"kind":"struct"},"11:841:2240":{"crate_id":11,"path":["hashbrown","map","RawOccupiedEntryMut"],"kind":"struct"},"6:563:9143":{"crate_id":6,"path":["libc","unix","linger"],"kind":"struct"},"2:39160:8007":{"crate_id":2,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"2:43034:24570":{"crate_id":2,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"5:7323:2041":{"crate_id":5,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:358:2195":{"crate_id":1,"path":["std","thread","scoped","Scope"],"kind":"struct"},"16:4949:13081":{"crate_id":16,"path":["gimli","constants","DwDefaulted"],"kind":"struct"},"14:221:12340":{"crate_id":14,"path":["rustc_demangle","SizeLimitExhausted"],"kind":"struct"},"17:11951:16552":{"crate_id":17,"path":["object","elf","SectionHeader32"],"kind":"struct"},"1:3221:2426":{"crate_id":1,"path":["std","io","stdio","Stdout"],"kind":"struct"},"17:9564:13517":{"crate_id":17,"path":["object","read","any","ComdatIterator"],"kind":"struct"},"17:13693:17809":{"crate_id":17,"path":["object","pe","Guid"],"kind":"struct"},"2:2836:7848":{"crate_id":2,"path":["core","marker","Tuple"],"kind":"trait"},"6:1286:9680":{"crate_id":6,"path":["libc","unix","bsd","apple","qos_class_t"],"kind":"enum"},"16:2644:12419":{"crate_id":16,"path":["gimli","common","DebugMacroOffset"],"kind":"struct"},"1:8184:2548":{"crate_id":1,"path":["std","path","Prefix"],"kind":"enum"},"18:609:29661":{"crate_id":18,"path":["memchr","memmem","twoway","Suffix"],"kind":"struct"},"16:7722:13415":{"crate_id":16,"path":["gimli","read","str","DebugLineStr"],"kind":"struct"},"17:12543:17057":{"crate_id":17,"path":["object","macho","LcStr"],"kind":"struct"},"11:992:2243":{"crate_id":11,"path":["hashbrown","map","Entry"],"kind":"enum"},"2:7985:2259":{"crate_id":2,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:5180:2560":{"crate_id":1,"path":["std","process","Child"],"kind":"struct"},"5:6101:2388":{"crate_id":5,"path":["alloc","sync","from_iter_exact","Guard"],"kind":"struct"},"2:41624:2446":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV4"],"kind":"struct"},"2:21406:2646":{"crate_id":2,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"18:538:17924":{"crate_id":18,"path":["memchr","memmem","rabinkarp","NeedleHash"],"kind":"struct"},"2:46020:2735":{"crate_id":2,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"11:2394:2234":{"crate_id":11,"path":["hashbrown","table","ExtractIf"],"kind":"struct"},"2:22021:2649":{"crate_id":2,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"17:12484:13712":{"crate_id":17,"path":["object","macho","FatArch64"],"kind":"struct"},"2:4436:2187":{"crate_id":2,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:8685:2609":{"crate_id":1,"path":["std","sync","mpsc","TryRecvError"],"kind":"enum"},"1:9439:20873":{"crate_id":1,"path":["std","sys","unix","fs","copy","FreeOnDrop"],"kind":"struct"},"2:22864:198":{"crate_id":2,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"11:1687:154":{"crate_id":11,"path":["hashbrown","set","HashSet"],"kind":"struct"},"17:13298:17105":{"crate_id":17,"path":["object","macho","ScatteredRelocationInfo"],"kind":"struct"},"5:3206:2251":{"crate_id":5,"path":["alloc","collections","btree","set","SymmetricDifference"],"kind":"struct"},"2:43012:155":{"crate_id":2,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:1044:2243":{"crate_id":1,"path":["std","collections","hash","map","Entry"],"kind":"enum"},"17:13710:17822":{"crate_id":17,"path":["object","pe","AnonObjectHeader"],"kind":"struct"},"1:10715:2381":{"crate_id":1,"path":["std","sys","unix","time","SystemTime"],"kind":"struct"},"2:46755:2716":{"crate_id":2,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"2:9616:116":{"crate_id":2,"path":["core","fmt","Debug"],"kind":"trait"},"2:21013:25495":{"crate_id":2,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:4850:21270":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"2:40142:8048":{"crate_id":2,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:8014:2406":{"crate_id":1,"path":["std","io","Split"],"kind":"struct"},"17:12983:17084":{"crate_id":17,"path":["object","macho","UuidCommand"],"kind":"struct"},"5:6959:27029":{"crate_id":5,"path":["alloc","vec","retain_mut","BackshiftOnDrop"],"kind":"struct"},"1:7177:21511":{"crate_id":1,"path":["std","panicking","Hook"],"kind":"enum"},"16:4585:12981":{"crate_id":16,"path":["gimli","constants","DwAccess"],"kind":"struct"},"6:3696:11851":{"crate_id":6,"path":["libc","unix","bsd","apple","pthread_rwlockattr_t"],"kind":"struct"},"5:7479:7880":{"crate_id":5,"path":["alloc","rc","UniqueRc"],"kind":"struct"},"1:1764:660":{"crate_id":1,"path":["std","env"],"kind":"module"},"17:14001:17843":{"crate_id":17,"path":["object","pe","ImageTlsDirectory32"],"kind":"struct"},"5:4395:2388":{"crate_id":5,"path":["alloc","collections","vec_deque","write_iter_wrapping","Guard"],"kind":"struct"},"2:40014:2203":{"crate_id":2,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"2:41941:94":{"crate_id":2,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"17:10603:13656":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsectionIterator"],"kind":"struct"},"16:4719:13043":{"crate_id":16,"path":["gimli","constants","DwLang"],"kind":"struct"},"17:12473:13711":{"crate_id":17,"path":["object","macho","FatArch32"],"kind":"struct"},"5:1444:2041":{"crate_id":5,"path":["alloc","collections","btree","map","IntoIter"],"kind":"struct"},"2:7988:2262":{"crate_id":2,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"16:7544:13405":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntryIter"],"kind":"struct"},"17:9852:13546":{"crate_id":17,"path":["object","read","archive","Members"],"kind":"enum"},"2:40109:7938":{"crate_id":2,"path":["core","char","EscapeDebug"],"kind":"struct"},"6:119:8814":{"crate_id":6,"path":["libc","unix","FILE"],"kind":"enum"},"2:43519:7893":{"crate_id":2,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"17:13174:17097":{"crate_id":17,"path":["object","macho","FvmfileCommand"],"kind":"struct"},"2:43600:7910":{"crate_id":2,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"2:44703:7836":{"crate_id":2,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"6:507:9137":{"crate_id":6,"path":["libc","unix","rusage"],"kind":"struct"},"1:949:2241":{"crate_id":1,"path":["std","collections","hash","map","RawVacantEntryMut"],"kind":"struct"},"17:14090:17852":{"crate_id":17,"path":["object","pe","ImageResourceDataEntry"],"kind":"struct"},"5:2143:27106":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","MergeIterInner"],"kind":"struct"},"11:2165:12267":{"crate_id":11,"path":["hashbrown","table","HashTable"],"kind":"struct"},"1:7547:2308":{"crate_id":1,"path":["std","env","VarError"],"kind":"enum"},"2:547:8392":{"crate_id":2,"path":["core","num","flt2dec","decoder","DecodableFloat"],"kind":"trait"},"2:7991:2260":{"crate_id":2,"path":["core","iter","traits","marker","InPlaceIterable"],"kind":"trait"},"1:638:2207":{"crate_id":1,"path":["std","backtrace","BacktraceFrame"],"kind":"struct"},"2:46399:2743":{"crate_id":2,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"2:2325:208":{"crate_id":2,"path":["core","cmp","PartialEq"],"kind":"trait"},"5:6468:2233":{"crate_id":5,"path":["alloc","vec","drain","Drain"],"kind":"struct"},"11:122:28435":{"crate_id":11,"path":["hashbrown","raw","RawTable"],"kind":"struct"},"16:6456:13369":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntryIter"],"kind":"struct"},"1:10590:20837":{"crate_id":1,"path":["std","sys","unix","process","process_inner","posix_spawn","PosixSpawnattr"],"kind":"struct"},"2:30928:8061":{"crate_id":2,"path":["core","cmp","Reverse"],"kind":"struct"},"2:9631:214":{"crate_id":2,"path":["core","fmt","Pointer"],"kind":"trait"},"1:10752:159":{"crate_id":1,"path":["std","sys","unix","time","Instant"],"kind":"struct"},"2:6963:8229":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:10334:2370":{"crate_id":1,"path":["std","sys","unix","fs","FileTimes"],"kind":"struct"},"17:11886:16549":{"crate_id":17,"path":["object","elf","FileHeader32"],"kind":"struct"},"16:2722:12422":{"crate_id":16,"path":["gimli","common","DebugRngListsBase"],"kind":"struct"},"17:12172:16566":{"crate_id":17,"path":["object","elf","Dyn32"],"kind":"struct"},"17:11991:16554":{"crate_id":17,"path":["object","elf","CompressionHeader32"],"kind":"struct"},"2:3326:7853":{"crate_id":2,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"11:1855:2234":{"crate_id":11,"path":["hashbrown","set","ExtractIf"],"kind":"struct"},"2:2498:2377":{"crate_id":2,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"6:5096:12088":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","if_data"],"kind":"struct"},"1:7440:2377":{"crate_id":1,"path":["std","sealed","Sealed"],"kind":"trait"},"5:3214:2249":{"crate_id":5,"path":["alloc","collections","btree","set","Intersection"],"kind":"struct"},"17:13024:17087":{"crate_id":17,"path":["object","macho","FilesetEntryCommand"],"kind":"struct"},"6:3730:11854":{"crate_id":6,"path":["libc","unix","bsd","apple","fstore_t"],"kind":"struct"},"1:8027:2450":{"crate_id":1,"path":["std","net","tcp","Incoming"],"kind":"struct"},"17:12252:16572":{"crate_id":17,"path":["object","elf","Vernaux"],"kind":"struct"},"2:50025:2664":{"crate_id":2,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"2:40093:7939":{"crate_id":2,"path":["core","char","EscapeUnicode"],"kind":"struct"},"16:3065:12435":{"crate_id":16,"path":["gimli","arch","Arm"],"kind":"struct"},"16:2526:12414":{"crate_id":16,"path":["gimli","common","DebugLineStrOffset"],"kind":"struct"},"6:4707:11934":{"crate_id":6,"path":["libc","unix","bsd","apple","sigevent"],"kind":"struct"},"2:40208:2330":{"crate_id":2,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"16:7391:13396":{"crate_id":16,"path":["gimli","read","op","EvaluationResult"],"kind":"enum"},"1:4003:2469":{"crate_id":1,"path":["std","os","unix","fs","FileTypeExt"],"kind":"trait"},"17:13244:17102":{"crate_id":17,"path":["object","macho","Nlist32"],"kind":"struct"},"1:3262:2423":{"crate_id":1,"path":["std","io","stdio","StderrLock"],"kind":"struct"},"2:10754:7915":{"crate_id":2,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:364:2196":{"crate_id":1,"path":["std","thread","scoped","ScopedJoinHandle"],"kind":"struct"},"16:5049:13109":{"crate_id":16,"path":["gimli","constants","DwLnct"],"kind":"struct"},"5:1413:2229":{"crate_id":5,"path":["alloc","collections","btree","map","Iter"],"kind":"struct"},"1:2216:2347":{"crate_id":1,"path":["std","fs","DirEntry"],"kind":"struct"},"16:4344:12884":{"crate_id":16,"path":["gimli","constants","DwAt"],"kind":"struct"},"16:7513:13402":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntryIter"],"kind":"struct"},"6:1282:9679":{"crate_id":6,"path":["libc","unix","bsd","apple","timezone"],"kind":"enum"},"17:11191:13534":{"crate_id":17,"path":["object","read","pe","export","Export"],"kind":"struct"},"2:2330:130":{"crate_id":2,"path":["core","cmp","Eq"],"kind":"trait"},"2:44291:7967":{"crate_id":2,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"2:47865:2738":{"crate_id":2,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"5:7232:2041":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"2:10429:2229":{"crate_id":2,"path":["core","slice","iter","Iter"],"kind":"struct"},"5:6514:27033":{"crate_id":5,"path":["alloc","vec","drain","drop","DropGuard"],"kind":"struct"},"17:11661:13483":{"crate_id":17,"path":["object","read","CodeView"],"kind":"struct"},"17:13981:17841":{"crate_id":17,"path":["object","pe","ImageThunkData32"],"kind":"struct"},"2:42995:24540":{"crate_id":2,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"2:48034:7815":{"crate_id":2,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"16:7884:13422":{"crate_id":16,"path":["gimli","read","unit","AttributeValue"],"kind":"enum"},"16:3461:12438":{"crate_id":16,"path":["gimli","arch","RiscV"],"kind":"struct"},"5:6798:7991":{"crate_id":5,"path":["alloc","vec","set_len_on_drop","SetLenOnDrop"],"kind":"struct"},"16:5982:13349":{"crate_id":16,"path":["gimli","read","cfi","RegisterRuleIter"],"kind":"struct"},"2:40413:8236":{"crate_id":2,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:10362:2372":{"crate_id":1,"path":["std","sys","unix","io","IoSlice"],"kind":"struct"},"6:4153:11887":{"crate_id":6,"path":["libc","unix","bsd","apple","in6_pktinfo"],"kind":"struct"},"2:43742:7947":{"crate_id":2,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"2:3718:25013":{"crate_id":2,"path":["core","array","iter","NonDrop"],"kind":"trait"},"2:30081:2455":{"crate_id":2,"path":["core","num","FpCategory"],"kind":"enum"},"2:40180:2331":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"6:1093:9474":{"crate_id":6,"path":["libc","unix","bsd","if_nameindex"],"kind":"struct"},"18:699:17916":{"crate_id":18,"path":["memchr","memmem","FinderBuilder"],"kind":"struct"},"1:1568:2234":{"crate_id":1,"path":["std","collections","hash","set","ExtractIf"],"kind":"struct"},"16:7792:13419":{"crate_id":16,"path":["gimli","read","unit","UnitType"],"kind":"enum"},"1:5367:2565":{"crate_id":1,"path":["std","process","exit"],"kind":"function"},"2:47205:2671":{"crate_id":2,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"10:36:28430":{"crate_id":10,"path":["adler","algo","U32X4"],"kind":"struct"},"2:3041:137":{"crate_id":2,"path":["core","ops","function","FnMut"],"kind":"trait"},"2:42732:69":{"crate_id":2,"path":["core","fmt","rt","Alignment"],"kind":"enum"},"4:0:1878":{"crate_id":4,"path":["rustc_std_workspace_core"],"kind":"module"},"16:6753:13381":{"crate_id":16,"path":["gimli","read","line","LineProgramHeader"],"kind":"struct"},"1:3144:21202":{"crate_id":1,"path":["std","io","stdio","StdinRaw"],"kind":"struct"},"2:46785:2722":{"crate_id":2,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"16:7041:28805":{"crate_id":16,"path":["gimli","read","lookup","DebugLookup"],"kind":"struct"},"16:4613:12985":{"crate_id":16,"path":["gimli","constants","DwVis"],"kind":"struct"},"5:1013:27033":{"crate_id":5,"path":["alloc","collections","binary_heap","drop","DropGuard"],"kind":"struct"},"6:1005:9535":{"crate_id":6,"path":["libc","unix","bsd","sockaddr"],"kind":"struct"},"2:2914:8281":{"crate_id":2,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:8850:20103":{"crate_id":1,"path":["std","sync","mpmc","utils","CachePadded"],"kind":"struct"},"2:43479:7900":{"crate_id":2,"path":["core","slice","iter","Chunks"],"kind":"struct"},"2:3044:138":{"crate_id":2,"path":["core","ops","function","FnOnce"],"kind":"trait"},"12:0:1883":{"crate_id":12,"path":["rustc_std_workspace_alloc"],"kind":"module"},"14:202:7968":{"crate_id":14,"path":["rustc_demangle","v0","ParseError"],"kind":"enum"},"2:21373:2652":{"crate_id":2,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"2:40334:8222":{"crate_id":2,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"18:671:17913":{"crate_id":18,"path":["memchr","memmem","FindRevIter"],"kind":"struct"},"1:6933:23471":{"crate_id":1,"path":["std","sys_common","wstr","WStrUnits"],"kind":"struct"},"16:5121:13133":{"crate_id":16,"path":["gimli","constants","DwRle"],"kind":"struct"},"3:0:478":{"crate_id":3,"path":["compiler_builtins"],"kind":"module"},"16:7651:13411":{"crate_id":16,"path":["gimli","read","rnglists","RngListIter"],"kind":"struct"},"17:8895:13505":{"crate_id":17,"path":["object","common","RelocationEncoding"],"kind":"enum"},"2:21199:24714":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr","with_addr"],"kind":"foreign_type"},"2:2788:113":{"crate_id":2,"path":["core","marker","Copy"],"kind":"trait"},"1:11468:1478":{"crate_id":1,"path":["std","slice"],"kind":"primitive"},"6:3838:11864":{"crate_id":6,"path":["libc","unix","bsd","apple","ifa_msghdr"],"kind":"struct"},"2:11933:8526":{"crate_id":2,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"16:6915:13387":{"crate_id":16,"path":["gimli","read","loclists","DebugLocLists"],"kind":"struct"},"1:6048:2602":{"crate_id":1,"path":["std","sync","mpmc","Sender"],"kind":"struct"},"16:4417:12933":{"crate_id":16,"path":["gimli","constants","DwForm"],"kind":"struct"},"16:7436:13397":{"crate_id":16,"path":["gimli","read","op","Expression"],"kind":"struct"},"17:9762:29624":{"crate_id":17,"path":["object","read","any","DynamicRelocationIteratorInternal"],"kind":"enum"},"6:3931:9016":{"crate_id":6,"path":["libc","unix","bsd","apple","flock"],"kind":"struct"},"17:10520:13652":{"crate_id":17,"path":["object","read","elf","version","VerdauxIterator"],"kind":"struct"},"16:3830:12466":{"crate_id":16,"path":["gimli","constants","DwUt"],"kind":"struct"},"17:582:13498":{"crate_id":17,"path":["object","read","any","Symbol"],"kind":"struct"},"6:4679:11932":{"crate_id":6,"path":["libc","unix","bsd","apple","sockaddr_storage"],"kind":"struct"},"6:1080:9542":{"crate_id":6,"path":["libc","unix","bsd","cmsghdr"],"kind":"struct"},"2:1752:24555":{"crate_id":2,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"16:5384:13328":{"crate_id":16,"path":["gimli","endianity","RunTimeEndian"],"kind":"enum"},"2:6259:8226":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindows"],"kind":"struct"},"17:11381:13763":{"crate_id":17,"path":["object","read","pe","rich","RichHeaderEntry"],"kind":"struct"},"16:2832:12427":{"crate_id":16,"path":["gimli","common","DebugTypesOffset"],"kind":"struct"},"6:3649:11628":{"crate_id":6,"path":["libc","unix","bsd","apple","mach_timebase_info"],"kind":"struct"},"16:6600:13378":{"crate_id":16,"path":["gimli","read","line","LineInstruction"],"kind":"enum"},"11:785:2233":{"crate_id":11,"path":["hashbrown","map","Drain"],"kind":"struct"},"1:1058:2244":{"crate_id":1,"path":["std","collections","hash","map","OccupiedEntry"],"kind":"struct"},"2:48124:7821":{"crate_id":2,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"2:44443:8514":{"crate_id":2,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"17:10980:13519":{"crate_id":17,"path":["object","read","macho","symbol","SymbolTable"],"kind":"struct"},"17:13286:17104":{"crate_id":17,"path":["object","macho","RelocationInfo"],"kind":"struct"},"1:8274:2551":{"crate_id":1,"path":["std","path","Component"],"kind":"enum"},"6:3655:2521":{"crate_id":6,"path":["libc","unix","bsd","apple","stat"],"kind":"struct"},"2:2833:2017":{"crate_id":2,"path":["core","marker","Unpin"],"kind":"trait"},"17:14296:17865":{"crate_id":17,"path":["object","pe","ImageHotPatchHashes"],"kind":"struct"},"1:10064:20838":{"crate_id":1,"path":["std","sys","unix","stack_overflow","Handler"],"kind":"struct"},"6:4271:11902":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_latency_qos_policy"],"kind":"struct"},"17:14156:17859":{"crate_id":17,"path":["object","pe","ImagePrologueDynamicRelocationHeader"],"kind":"struct"},"2:22732:194":{"crate_id":2,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:11469:1510":{"crate_id":1,"path":["std","str"],"kind":"primitive"},"2:9633:7865":{"crate_id":2,"path":["core","fmt","LowerExp"],"kind":"trait"},"17:12698:17066":{"crate_id":17,"path":["object","macho","SubFrameworkCommand"],"kind":"struct"},"1:3150:22108":{"crate_id":1,"path":["std","io","stdio","StderrRaw"],"kind":"struct"},"2:44431:8518":{"crate_id":2,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"5:1484:2235":{"crate_id":5,"path":["alloc","collections","btree","map","ValuesMut"],"kind":"struct"},"1:871:2231":{"crate_id":1,"path":["std","collections","hash","map","Keys"],"kind":"struct"},"16:6560:28850":{"crate_id":16,"path":["gimli","read","lazy","imp","LazyArc"],"kind":"struct"},"6:4520:11918":{"crate_id":6,"path":["libc","unix","bsd","apple","image_offset"],"kind":"struct"},"2:43498:7902":{"crate_id":2,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:1429:154":{"crate_id":1,"path":["std","collections","hash","set","HashSet"],"kind":"struct"},"2:45730:2702":{"crate_id":2,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"17:11337:13760":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryEntryData"],"kind":"enum"},"1:8829:20637":{"crate_id":1,"path":["std","sync","mpmc","select","Selected"],"kind":"enum"},"17:10186:13587":{"crate_id":17,"path":["object","read","coff","import","ImportObjectData"],"kind":"struct"},"6:4199:11893":{"crate_id":6,"path":["libc","unix","bsd","apple","sa_endpoints_t"],"kind":"struct"},"2:44491:2641":{"crate_id":2,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"2:42214:83":{"crate_id":2,"path":["core","sync","atomic","AtomicI128"],"kind":"struct"},"16:8195:13431":{"crate_id":16,"path":["gimli","read","unit","DebugTypesUnitHeadersIter"],"kind":"struct"},"17:13723:17823":{"crate_id":17,"path":["object","pe","AnonObjectHeaderV2"],"kind":"struct"},"17:9998:13557":{"crate_id":17,"path":["object","read","coff","section","CoffSection"],"kind":"struct"},"1:4927:211":{"crate_id":1,"path":["std","path","PathBuf"],"kind":"struct"},"11:796:2234":{"crate_id":11,"path":["hashbrown","map","ExtractIf"],"kind":"struct"},"2:3654:2041":{"crate_id":2,"path":["core","array","iter","IntoIter"],"kind":"struct"},"2:22019:2377":{"crate_id":2,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:1585:2251":{"crate_id":1,"path":["std","collections","hash","set","SymmetricDifference"],"kind":"struct"},"1:5245:109":{"crate_id":1,"path":["std","process","Command"],"kind":"struct"},"13:110:12285":{"crate_id":13,"path":["std_detect","detect","arch","x86","Feature"],"kind":"enum"},"2:40222:2332":{"crate_id":2,"path":["core","ffi","c_char"],"kind":"type_alias"},"2:9273:25677":{"crate_id":2,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"17:11086:13752":{"crate_id":17,"path":["object","read","pe","file","PeComdatSectionIterator"],"kind":"struct"},"11:1882:2252":{"crate_id":11,"path":["hashbrown","set","Union"],"kind":"struct"},"2:48086:7819":{"crate_id":2,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"17:11351:13761":{"crate_id":17,"path":["object","read","pe","resource","ResourceName"],"kind":"struct"},"17:12598:17060":{"crate_id":17,"path":["object","macho","Section32"],"kind":"struct"},"5:5328:27033":{"crate_id":5,"path":["alloc","slice","hack","to_vec","DropGuard"],"kind":"struct"},"2:30530:24219":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"17:14083:17851":{"crate_id":17,"path":["object","pe","ImageResourceDirStringU"],"kind":"struct"},"5:35:2284":{"crate_id":5,"path":["alloc","raw_vec","RawVec"],"kind":"struct"},"16:5673:13337":{"crate_id":16,"path":["gimli","read","cfi","EhFrame"],"kind":"struct"},"11:868:2242":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilder"],"kind":"struct"},"1:2368:2353":{"crate_id":1,"path":["std","fs","symlink_metadata"],"kind":"function"},"6:4177:11890":{"crate_id":6,"path":["libc","unix","bsd","apple","arphdr"],"kind":"struct"},"17:14460:17877":{"crate_id":17,"path":["object","pe","ImageFunctionEntry"],"kind":"struct"},"2:43914:7945":{"crate_id":2,"path":["core","str","iter","RMatches"],"kind":"struct"},"2:2892:8278":{"crate_id":2,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"11:2303:12277":{"crate_id":11,"path":["hashbrown","table","AbsentEntry"],"kind":"struct"},"16:3600:12439":{"crate_id":16,"path":["gimli","arch","X86"],"kind":"struct"},"17:13826:17828":{"crate_id":17,"path":["object","pe","ImageAuxSymbolTokenDef"],"kind":"struct"},"18:707:7925":{"crate_id":18,"path":["memchr","memmem","Searcher"],"kind":"struct"},"1:8759:111":{"crate_id":1,"path":["std","sync","mpmc","context","Context"],"kind":"struct"},"2:46277:2675":{"crate_id":2,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"18:481:17920":{"crate_id":18,"path":["memchr","cow","CowBytes"],"kind":"struct"},"1:10833:21252":{"crate_id":1,"path":["std","sys_common","process","CommandEnv"],"kind":"struct"},"17:8594:13482":{"crate_id":17,"path":["object","common","Architecture"],"kind":"enum"},"2:40362:8231":{"crate_id":2,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"17:11215:13721":{"crate_id":17,"path":["object","read","pe","import","ImportTable"],"kind":"struct"},"2:7078:8210":{"crate_id":2,"path":["core","iter","range","Step"],"kind":"trait"},"1:10982:2452":{"crate_id":1,"path":["std","sys_common","net","TcpStream"],"kind":"struct"},"2:10598:7919":{"crate_id":2,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"18:690:17915":{"crate_id":18,"path":["memchr","memmem","FinderRev"],"kind":"struct"},"2:39419:8292":{"crate_id":2,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"2:21582:2657":{"crate_id":2,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"2:9627:7867":{"crate_id":2,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:8977:21967":{"crate_id":1,"path":["std","sys","personality","dwarf","eh","EHContext"],"kind":"struct"},"1:3305:2411":{"crate_id":1,"path":["std","io","stdio","IsTerminal"],"kind":"trait"},"17:12062:16558":{"crate_id":17,"path":["object","elf","Syminfo32"],"kind":"struct"},"1:7377:20876":{"crate_id":1,"path":["std","backtrace_rs","print","BacktraceFrameFmt"],"kind":"struct"},"1:11486:1672":{"crate_id":1,"path":["std","usize"],"kind":"primitive"},"2:4033:8430":{"crate_id":2,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"2:41732:2230":{"crate_id":2,"path":["core","option","IterMut"],"kind":"struct"},"1:10355:124":{"crate_id":1,"path":["std","sys","unix","fs","DirBuilder"],"kind":"struct"},"2:43975:7929":{"crate_id":2,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:7486:2114":{"crate_id":1,"path":["std","thread","Thread"],"kind":"struct"},"1:7716:21275":{"crate_id":1,"path":["std","io","buffered","linewritershim","LineWriterShim"],"kind":"struct"},"1:11043:2453":{"crate_id":1,"path":["std","sys_common","net","UdpSocket"],"kind":"struct"},"2:40868:2112":{"crate_id":2,"path":["core","iter","sources","once","Once"],"kind":"struct"},"2:48025:7814":{"crate_id":2,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"16:2472:12412":{"crate_id":16,"path":["gimli","common","DebugInfoOffset"],"kind":"struct"},"1:3223:2427":{"crate_id":1,"path":["std","io","stdio","StdoutLock"],"kind":"struct"},"5:1140:27502":{"crate_id":5,"path":["alloc","collections","btree","dedup_sorted_iter","DedupSortedIter"],"kind":"struct"},"2:40343:8223":{"crate_id":2,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"6:4770:11942":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_extended_info"],"kind":"struct"},"6:3622:11847":{"crate_id":6,"path":["libc","unix","bsd","apple","glob_t"],"kind":"struct"},"2:9629:7868":{"crate_id":2,"path":["core","fmt","UpperHex"],"kind":"trait"},"16:6818:13383":{"crate_id":16,"path":["gimli","read","line","CompleteLineProgram"],"kind":"struct"},"6:4378:11912":{"crate_id":6,"path":["libc","unix","bsd","apple","task_thread_times_info"],"kind":"struct"},"15:0:1885":{"crate_id":15,"path":["addr2line"],"kind":"module"},"1:9754:20605":{"crate_id":1,"path":["std","sys","unix","os_str","Slice"],"kind":"struct"},"2:32232:8253":{"crate_id":2,"path":["core","marker","PhantomPinned"],"kind":"struct"},"16:8281:13434":{"crate_id":16,"path":["gimli","read","StoreOnHeap"],"kind":"struct"},"16:2321:12405":{"crate_id":16,"path":["gimli","common","Encoding"],"kind":"struct"},"1:6610:2642":{"crate_id":1,"path":["std","std_float","StdFloat"],"kind":"trait"},"17:12496:17054":{"crate_id":17,"path":["object","macho","MachHeader32"],"kind":"struct"},"16:5830:13344":{"crate_id":16,"path":["gimli","read","cfi","CommonInformationEntry"],"kind":"struct"},"1:8701:2607":{"crate_id":1,"path":["std","sync","mpsc","RecvTimeoutError"],"kind":"enum"},"1:7271:20598":{"crate_id":1,"path":["std","panicking","rust_panic_without_hook","RewrapBox"],"kind":"struct"},"2:43636:7940":{"crate_id":2,"path":["core","str","error","Utf8Error"],"kind":"struct"},"17:13758:17808":{"crate_id":17,"path":["object","pe","ImageSectionHeader"],"kind":"struct"},"2:42136:86":{"crate_id":2,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"2:44439:8513":{"crate_id":2,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"6:1087:9543":{"crate_id":6,"path":["libc","unix","bsd","fsid_t"],"kind":"struct"},"5:4004:2233":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","Drain"],"kind":"struct"},"1:11099:7830":{"crate_id":1,"path":["std","alloc","System"],"kind":"struct"},"2:46038:2741":{"crate_id":2,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"16:6318:13359":{"crate_id":16,"path":["gimli","read","reader","ReaderOffsetId"],"kind":"struct"},"6:4890:11950":{"crate_id":6,"path":["libc","unix","bsd","apple","ifdevmtu"],"kind":"struct"},"17:13914:17836":{"crate_id":17,"path":["object","pe","ImageBaseRelocation"],"kind":"struct"},"17:11358:13762":{"crate_id":17,"path":["object","read","pe","resource","ResourceNameOrId"],"kind":"enum"},"2:10740:7917":{"crate_id":2,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"2:40255:2346":{"crate_id":2,"path":["core","ffi","VaListImpl"],"kind":"struct"},"2:2541:160":{"crate_id":2,"path":["core","convert","Into"],"kind":"trait"},"2:7533:163":{"crate_id":2,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"2:2784:7849":{"crate_id":2,"path":["core","marker","Unsize"],"kind":"trait"},"6:555:9142":{"crate_id":6,"path":["libc","unix","winsize"],"kind":"struct"},"2:22417:8395":{"crate_id":2,"path":["core","num","fmt","Formatted"],"kind":"struct"},"2:40883:2432":{"crate_id":2,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"6:596:9148":{"crate_id":6,"path":["libc","unix","protoent"],"kind":"struct"},"2:43662:7934":{"crate_id":2,"path":["core","str","iter","Chars"],"kind":"struct"},"2:40514:8227":{"crate_id":2,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"6:4549:11922":{"crate_id":6,"path":["libc","unix","bsd","apple","attribute_set_t"],"kind":"struct"},"17:8794:13502":{"crate_id":17,"path":["object","common","SymbolKind"],"kind":"enum"},"1:7991:2403":{"crate_id":1,"path":["std","io","Chain"],"kind":"struct"},"16:7828:13420":{"crate_id":16,"path":["gimli","read","unit","UnitHeader"],"kind":"struct"},"17:10561:13619":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSection"],"kind":"struct"},"17:13778:13564":{"crate_id":17,"path":["object","pe","ImageSymbol"],"kind":"struct"},"17:10165:13586":{"crate_id":17,"path":["object","read","coff","import","ImportType"],"kind":"enum"},"1:2644:2417":{"crate_id":1,"path":["std","io","buffered","linewriter","LineWriter"],"kind":"struct"},"16:5712:13339":{"crate_id":16,"path":["gimli","read","cfi","BaseAddresses"],"kind":"struct"},"16:5995:13350":{"crate_id":16,"path":["gimli","read","cfi","UnwindTableRow"],"kind":"struct"},"17:13113:17093":{"crate_id":17,"path":["object","macho","DyldInfoCommand"],"kind":"struct"},"17:14110:17854":{"crate_id":17,"path":["object","pe","ImageDynamicRelocationTable"],"kind":"struct"},"2:44411:8512":{"crate_id":2,"path":["core","str","LinesMap"],"kind":"struct"},"6:4543:11921":{"crate_id":6,"path":["libc","unix","bsd","apple","vol_capabilities_attr_t"],"kind":"struct"},"2:22137:8340":{"crate_id":2,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:11481:1613":{"crate_id":1,"path":["std","u16"],"kind":"primitive"},"11:829:2239":{"crate_id":11,"path":["hashbrown","map","RawEntryMut"],"kind":"enum"},"1:11485:850":{"crate_id":1,"path":["std","isize"],"kind":"primitive"},"14:31:12330":{"crate_id":14,"path":["rustc_demangle","v0","Demangle"],"kind":"struct"},"2:43966:7930":{"crate_id":2,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"2:46497:24405":{"crate_id":2,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"16:6041:13352":{"crate_id":16,"path":["gimli","read","cfi","RegisterRule"],"kind":"enum"},"5:1466:2231":{"crate_id":5,"path":["alloc","collections","btree","map","Keys"],"kind":"struct"},"2:21584:2651":{"crate_id":2,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"16:4745:13045":{"crate_id":16,"path":["gimli","constants","DwAddr"],"kind":"struct"},"17:11845:13770":{"crate_id":17,"path":["object","archive","AixFileHeader"],"kind":"struct"},"2:40490:8241":{"crate_id":2,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"2:41860:2230":{"crate_id":2,"path":["core","result","IterMut"],"kind":"struct"},"5:2964:27069":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Immut"],"kind":"struct"},"5:6587:2041":{"crate_id":5,"path":["alloc","vec","into_iter","IntoIter"],"kind":"struct"},"6:4672:11931":{"crate_id":6,"path":["libc","unix","bsd","apple","pthread_cond_t"],"kind":"struct"},"2:43508:7903":{"crate_id":2,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"6:4289:11772":{"crate_id":6,"path":["libc","unix","bsd","apple","mstats"],"kind":"struct"},"6:4690:11933":{"crate_id":6,"path":["libc","unix","bsd","apple","utmpx"],"kind":"struct"},"11:2479:28442":{"crate_id":11,"path":["hashbrown","raw","Fallibility"],"kind":"enum"},"2:11272:7907":{"crate_id":2,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"17:11872:13771":{"crate_id":17,"path":["object","archive","AixMemberOffset"],"kind":"struct"},"1:7337:20606":{"crate_id":1,"path":["std","backtrace_rs","symbolize","SymbolName"],"kind":"struct"},"1:2928:234":{"crate_id":1,"path":["std","io","error","Result"],"kind":"type_alias"},"1:10839:2575":{"crate_id":1,"path":["std","sys_common","process","CommandEnvs"],"kind":"struct"},"2:43668:7933":{"crate_id":2,"path":["core","str","iter","CharIndices"],"kind":"struct"},"16:4806:13058":{"crate_id":16,"path":["gimli","constants","DwCc"],"kind":"struct"},"16:5866:13345":{"crate_id":16,"path":["gimli","read","cfi","PartialFrameDescriptionEntry"],"kind":"struct"},"2:46528:24403":{"crate_id":2,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"11:2286:2245":{"crate_id":11,"path":["hashbrown","table","VacantEntry"],"kind":"struct"},"17:12888:17078":{"crate_id":17,"path":["object","macho","DylibModule32"],"kind":"struct"},"2:8659:2215":{"crate_id":2,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"16:6721:13380":{"crate_id":16,"path":["gimli","read","line","ColumnType"],"kind":"enum"},"6:4061:11879":{"crate_id":6,"path":["libc","unix","bsd","apple","mach_header_64"],"kind":"struct"},"2:11972:8525":{"crate_id":2,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"5:0:316":{"crate_id":5,"path":["alloc"],"kind":"module"},"17:12750:17070":{"crate_id":17,"path":["object","macho","PreboundDylibCommand"],"kind":"struct"},"6:5252:12099":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","x86_64","__darwin_xmm_reg"],"kind":"struct"},"11:357:28433":{"crate_id":11,"path":["hashbrown","raw","RawIntoIter"],"kind":"struct"},"2:40455:8238":{"crate_id":2,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"2:2544:141":{"crate_id":2,"path":["core","convert","From"],"kind":"trait"},"1:7732:2269":{"crate_id":1,"path":["std","io","cursor","Cursor"],"kind":"struct"},"1:922:2237":{"crate_id":1,"path":["std","collections","hash","map","IntoValues"],"kind":"struct"},"1:4535:2520":{"crate_id":1,"path":["std","os","macos","fs","FileTimesExt"],"kind":"trait"},"11:1051:12271":{"crate_id":11,"path":["hashbrown","map","EntryRef"],"kind":"enum"},"2:41565:24247":{"crate_id":2,"path":["core","net","parser","AddrKind"],"kind":"enum"},"17:13838:17829":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunction"],"kind":"struct"},"5:261:27033":{"crate_id":5,"path":["alloc","boxed","thin","drop","DropGuard"],"kind":"struct"},"2:3234:8291":{"crate_id":2,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"17:8825:13503":{"crate_id":17,"path":["object","common","SymbolScope"],"kind":"enum"},"1:11022:2451":{"crate_id":1,"path":["std","sys_common","net","TcpListener"],"kind":"struct"},"2:48005:7812":{"crate_id":2,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"6:4304:11906":{"crate_id":6,"path":["libc","unix","bsd","apple","sched_param"],"kind":"struct"},"2:41643:2447":{"crate_id":2,"path":["core","net","socket_addr","SocketAddrV6"],"kind":"struct"},"17:10036:13563":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolTable"],"kind":"struct"},"2:41792:8462":{"crate_id":2,"path":["core","panicking","AssertKind"],"kind":"enum"},"2:7308:2582":{"crate_id":2,"path":["core","iter","sources","once","once"],"kind":"function"},"17:12711:17067":{"crate_id":17,"path":["object","macho","SubClientCommand"],"kind":"struct"},"1:9055:2305":{"crate_id":1,"path":["std","sys","unix","args","Args"],"kind":"struct"},"17:9823:13545":{"crate_id":17,"path":["object","read","archive","ArchiveKind"],"kind":"enum"},"2:10560:7905":{"crate_id":2,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"6:3716:9183":{"crate_id":6,"path":["libc","unix","bsd","apple","sigaction"],"kind":"struct"},"5:2463:25919":{"crate_id":5,"path":["alloc","collections","btree","node","NodeRef"],"kind":"struct"},"2:48071:7818":{"crate_id":2,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"17:13906:17835":{"crate_id":17,"path":["object","pe","ImageLinenumber"],"kind":"struct"},"9:330:12206":{"crate_id":9,"path":["miniz_oxide","inflate","core","LocalVars"],"kind":"struct"},"2:10281:247":{"crate_id":2,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"17:11074:13751":{"crate_id":17,"path":["object","read","pe","file","PeComdat"],"kind":"struct"},"2:21187:2655":{"crate_id":2,"path":["core","core_simd","elements","const_ptr","SimdConstPtr"],"kind":"trait"},"11:1562:12276":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcVacantEntry"],"kind":"struct"},"18:727:17917":{"crate_id":18,"path":["memchr","memmem","SearcherConfig"],"kind":"struct"},"1:853:2230":{"crate_id":1,"path":["std","collections","hash","map","IterMut"],"kind":"struct"},"16:7554:13406":{"crate_id":16,"path":["gimli","read","rnglists","DebugRanges"],"kind":"struct"},"2:12151:2555":{"crate_id":2,"path":["core","str","traits","FromStr"],"kind":"trait"},"2:12007:7918":{"crate_id":2,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"2:40101:2203":{"crate_id":2,"path":["core","char","EscapeDefault"],"kind":"struct"},"16:3797:12457":{"crate_id":16,"path":["gimli","constants","DwSectV2"],"kind":"struct"},"2:10712:7916":{"crate_id":2,"path":["core","slice","iter","SplitN"],"kind":"struct"},"2:40071:8051":{"crate_id":2,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"16:8294:133":{"crate_id":16,"path":["gimli","read","Error"],"kind":"enum"},"2:2872:8274":{"crate_id":2,"path":["core","ops","arith","Neg"],"kind":"trait"},"2:22765:195":{"crate_id":2,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"5:1475:2232":{"crate_id":5,"path":["alloc","collections","btree","map","Values"],"kind":"struct"},"17:10962:13667":{"crate_id":17,"path":["object","read","macho","section","MachOSectionInternal"],"kind":"struct"},"17:12437:17052":{"crate_id":17,"path":["object","macho","DyldCacheImageInfo"],"kind":"struct"},"17:11124:13723":{"crate_id":17,"path":["object","read","pe","section","PeSectionIterator"],"kind":"struct"},"6:4564:11924":{"crate_id":6,"path":["libc","unix","bsd","apple","ifconf"],"kind":"struct"},"16:5816:28653":{"crate_id":16,"path":["gimli","read","cfi","AugmentationData"],"kind":"struct"},"2:39301:220":{"crate_id":2,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:7668:2370":{"crate_id":1,"path":["std","fs","FileTimes"],"kind":"struct"},"17:256:29617":{"crate_id":17,"path":["object","read","util","DebugByte"],"kind":"struct"},"5:7272:27103":{"crate_id":5,"path":["alloc","collections","btree","merge_iter","Peeked"],"kind":"enum"},"6:1121:2489":{"crate_id":6,"path":["libc","unix","bsd","sockaddr_un"],"kind":"struct"},"17:10714:13707":{"crate_id":17,"path":["object","read","macho","file","MachOComdatIterator"],"kind":"struct"},"11:772:2232":{"crate_id":11,"path":["hashbrown","map","Values"],"kind":"struct"},"2:40654:8243":{"crate_id":2,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"17:12280:16574":{"crate_id":17,"path":["object","elf","NoteHeader64"],"kind":"struct"},"17:9086:13330":{"crate_id":17,"path":["object","endian","BigEndian"],"kind":"struct"},"16:8239:13433":{"crate_id":16,"path":["gimli","read","value","Value"],"kind":"enum"},"2:45686:2701":{"crate_id":2,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"2:3023:2265":{"crate_id":2,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"5:1104:27504":{"crate_id":5,"path":["alloc","collections","btree","append","MergeIter"],"kind":"struct"},"2:46231:2669":{"crate_id":2,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"6:4261:11900":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_affinity_policy"],"kind":"struct"},"17:8953:13507":{"crate_id":17,"path":["object","common","SegmentFlags"],"kind":"enum"},"2:9573:2322":{"crate_id":2,"path":["core","fmt","Write"],"kind":"trait"},"7:77:12128":{"crate_id":7,"path":["unwind","libunwind","_Unwind_Action"],"kind":"enum"},"16:2359:12407":{"crate_id":16,"path":["gimli","common","Register"],"kind":"struct"},"17:10112:13583":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatSectionIterator"],"kind":"struct"},"2:22299:2456":{"crate_id":2,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"16:6415:13367":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeaderIter"],"kind":"struct"},"1:7465:2186":{"crate_id":1,"path":["std","thread","ThreadId"],"kind":"struct"},"17:9790:29626":{"crate_id":17,"path":["object","read","any","SectionRelocationIteratorInternal"],"kind":"enum"},"17:13676:17820":{"crate_id":17,"path":["object","pe","ImageNtHeaders32"],"kind":"struct"},"17:8765:13501":{"crate_id":17,"path":["object","common","ComdatKind"],"kind":"enum"},"18:590:24532":{"crate_id":18,"path":["memchr","memmem","twoway","TwoWay"],"kind":"struct"},"1:11479:796":{"crate_id":1,"path":["std","i128"],"kind":"primitive"},"6:3682:11849":{"crate_id":6,"path":["libc","unix","bsd","apple","pthread_mutexattr_t"],"kind":"struct"},"6:4931:11954":{"crate_id":6,"path":["libc","unix","bsd","apple","ifreq"],"kind":"struct"},"2:9635:7866":{"crate_id":2,"path":["core","fmt","UpperExp"],"kind":"trait"},"2:39387:2221":{"crate_id":2,"path":["core","ops","range","Bound"],"kind":"enum"},"16:5403:13329":{"crate_id":16,"path":["gimli","endianity","LittleEndian"],"kind":"struct"},"2:40854:23771":{"crate_id":2,"path":["core","iter","sources","from_coroutine","FromCoroutine"],"kind":"struct"},"2:22259:24533":{"crate_id":2,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:7235:20601":{"crate_id":1,"path":["std","panicking","begin_panic_handler","FormatStringPayload"],"kind":"struct"},"2:42762:24569":{"crate_id":2,"path":["core","fmt","rt","Flag"],"kind":"enum"},"6:3753:11857":{"crate_id":6,"path":["libc","unix","bsd","apple","fspecread_t"],"kind":"struct"},"1:10322:20271":{"crate_id":1,"path":["std","sys","unix","fs","FilePermissions"],"kind":"struct"},"17:9617:29601":{"crate_id":17,"path":["object","read","any","ComdatSectionIteratorInternal"],"kind":"enum"},"11:2085:2245":{"crate_id":11,"path":["hashbrown","set","VacantEntry"],"kind":"struct"},"16:5661:13336":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTable"],"kind":"struct"},"2:4168:8029":{"crate_id":2,"path":["core","cell","once","OnceCell"],"kind":"struct"},"17:10397:13647":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatSectionIterator"],"kind":"struct"},"2:42489:7860":{"crate_id":2,"path":["core","fmt","num","Octal"],"kind":"struct"},"11:2494:2227":{"crate_id":11,"path":["hashbrown","TryReserveError"],"kind":"enum"},"17:14145:17858":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64V2"],"kind":"struct"},"17:12737:17069":{"crate_id":17,"path":["object","macho","SubLibraryCommand"],"kind":"struct"},"1:10636:2569":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatus"],"kind":"struct"},"16:149:12381":{"crate_id":16,"path":["gimli","read","util","ArrayVec"],"kind":"struct"},"18:491:29648":{"crate_id":18,"path":["memchr","cow","Imp"],"kind":"struct"},"17:10240:13565":{"crate_id":17,"path":["object","read","elf","section","SectionTable"],"kind":"struct"},"17:9172:13510":{"crate_id":17,"path":["object","endian","U64Bytes"],"kind":"struct"},"17:10646:13704":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCache"],"kind":"struct"},"2:21287:2661":{"crate_id":2,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"5:4236:2229":{"crate_id":5,"path":["alloc","collections","vec_deque","iter","Iter"],"kind":"struct"},"1:3969:2468":{"crate_id":1,"path":["std","os","unix","fs","MetadataExt"],"kind":"trait"},"2:12205:7925":{"crate_id":2,"path":["core","str","pattern","Searcher"],"kind":"trait"},"2:41980:84":{"crate_id":2,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"5:7240:2256":{"crate_id":5,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"2:44503:8533":{"crate_id":2,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"6:5288:12102":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","x86_64","align","max_align_t"],"kind":"struct"},"1:2382:2357":{"crate_id":1,"path":["std","fs","read_link"],"kind":"function"},"1:3185:2425":{"crate_id":1,"path":["std","io","stdio","StdinLock"],"kind":"struct"},"17:12225:16570":{"crate_id":17,"path":["object","elf","Verdaux"],"kind":"struct"},"2:12794:162":{"crate_id":2,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"16:7582:13408":{"crate_id":16,"path":["gimli","read","rnglists","RangeLists"],"kind":"struct"},"2:40020:8011":{"crate_id":2,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"5:6335:2786":{"crate_id":5,"path":["alloc","task","Wake"],"kind":"trait"},"5:2037:2269":{"crate_id":5,"path":["alloc","collections","btree","map","Cursor"],"kind":"struct"},"1:8008:2405":{"crate_id":1,"path":["std","io","Bytes"],"kind":"struct"},"1:3348:2432":{"crate_id":1,"path":["std","io","util","Repeat"],"kind":"struct"},"17:9328:2405":{"crate_id":17,"path":["object","read","util","Bytes"],"kind":"struct"},"2:40892:8215":{"crate_id":2,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"17:14522:17882":{"crate_id":17,"path":["object","pe","ImportObjectHeader"],"kind":"struct"},"16:6376:13364":{"crate_id":16,"path":["gimli","read","abbrev","Attributes"],"kind":"enum"},"6:3948:11872":{"crate_id":6,"path":["libc","unix","bsd","apple","lconv"],"kind":"struct"},"1:8945:2199":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","Key"],"kind":"struct"},"17:10575:13654":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsectionIterator"],"kind":"struct"},"1:6342:2597":{"crate_id":1,"path":["std","sync","poison","TryLockError"],"kind":"enum"},"2:44665:2782":{"crate_id":2,"path":["core","task","wake","RawWaker"],"kind":"struct"},"11:1876:2251":{"crate_id":11,"path":["hashbrown","set","SymmetricDifference"],"kind":"struct"},"2:42247:90":{"crate_id":2,"path":["core","sync","atomic","AtomicU128"],"kind":"struct"},"2:9591:140":{"crate_id":2,"path":["core","fmt","Formatter"],"kind":"struct"},"17:14221:17862":{"crate_id":17,"path":["object","pe","ImageLoadConfigDirectory64"],"kind":"struct"},"11:2461:28443":{"crate_id":11,"path":["hashbrown","raw","sse2","Group"],"kind":"struct"},"17:14118:17855":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32"],"kind":"struct"},"2:2171:8303":{"crate_id":2,"path":["core","ptr","from_exposed_addr"],"kind":"function"},"16:2406:12409":{"crate_id":16,"path":["gimli","common","DebugAddrBase"],"kind":"struct"},"1:5424:228":{"crate_id":1,"path":["std","sync","mpsc","Receiver"],"kind":"struct"},"16:2766:12424":{"crate_id":16,"path":["gimli","common","DebugStrOffset"],"kind":"struct"},"2:4068:7847":{"crate_id":2,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"18:96:17897":{"crate_id":18,"path":["memchr","memchr","iter","Memchr2"],"kind":"struct"},"16:5612:13333":{"crate_id":16,"path":["gimli","read","cfi","EhFrameHdr"],"kind":"struct"},"17:10097:13555":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdat"],"kind":"struct"},"16:8181:13430":{"crate_id":16,"path":["gimli","read","unit","DebugTypes"],"kind":"struct"},"2:39199:7852":{"crate_id":2,"path":["core","ops","coroutine","CoroutineState"],"kind":"enum"},"16:4862:13066":{"crate_id":16,"path":["gimli","constants","DwOrd"],"kind":"struct"},"17:3441:13673":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolIterator"],"kind":"struct"},"1:11484:1612":{"crate_id":1,"path":["std","u128"],"kind":"primitive"},"2:32124:13433":{"crate_id":2,"path":["core","error","tags","Value"],"kind":"struct"},"17:12111:16562":{"crate_id":17,"path":["object","elf","Rel64"],"kind":"struct"},"16:8167:13429":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeIter"],"kind":"struct"},"2:40285:2371":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedCursor"],"kind":"struct"},"2:42722:24572":{"crate_id":2,"path":["core","fmt","rt","Placeholder"],"kind":"struct"},"2:46867:2670":{"crate_id":2,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:416:182":{"crate_id":1,"path":["std","thread","local","LocalKey"],"kind":"struct"},"17:9574:29616":{"crate_id":17,"path":["object","read","any","ComdatIteratorInternal"],"kind":"enum"},"2:0:534":{"crate_id":2,"path":["core"],"kind":"module"},"2:43003:8073":{"crate_id":2,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"2:40041:24113":{"crate_id":2,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:11477:799":{"crate_id":1,"path":["std","i32"],"kind":"primitive"},"16:4497:12965":{"crate_id":16,"path":["gimli","constants","DwLle"],"kind":"struct"},"2:2876:2638":{"crate_id":2,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"16:4053:12617":{"crate_id":16,"path":["gimli","constants","DwTag"],"kind":"struct"},"2:2367:209":{"crate_id":2,"path":["core","cmp","PartialOrd"],"kind":"trait"},"2:9091:89":{"crate_id":2,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"16:6083:12375":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstruction"],"kind":"enum"},"1:8740:2592":{"crate_id":1,"path":["std","sync","condvar","WaitTimeoutResult"],"kind":"struct"},"1:5869:20879":{"crate_id":1,"path":["std","sync","mpmc","list","Channel"],"kind":"struct"},"2:30424:24175":{"crate_id":2,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"2:4362:8022":{"crate_id":2,"path":["core","cell","Ref"],"kind":"struct"},"16:7462:13398":{"crate_id":16,"path":["gimli","read","op","OperationIter"],"kind":"struct"},"17:11151:13753":{"crate_id":17,"path":["object","read","pe","section","PeRelocationIterator"],"kind":"struct"},"16:7474:13399":{"crate_id":16,"path":["gimli","read","op","Evaluation"],"kind":"struct"},"1:11322:19751":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","mmap","Mmap"],"kind":"struct"},"5:2972:27070":{"crate_id":5,"path":["alloc","collections","btree","node","marker","ValMut"],"kind":"struct"},"11:1525:12274":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcEntry"],"kind":"enum"},"2:43796:7916":{"crate_id":2,"path":["core","str","iter","SplitN"],"kind":"struct"},"17:12685:17065":{"crate_id":17,"path":["object","macho","DylibCommand"],"kind":"struct"},"16:7102:13393":{"crate_id":16,"path":["gimli","read","op","DieReference"],"kind":"enum"},"17:9137:13485":{"crate_id":17,"path":["object","endian","U32Bytes"],"kind":"struct"},"2:12781:146":{"crate_id":2,"path":["core","future","future","Future"],"kind":"trait"},"6:4910:11953":{"crate_id":6,"path":["libc","unix","bsd","apple","__c_anonymous_ifr_ifru"],"kind":"union"},"6:5090:12087":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","timeval32"],"kind":"struct"},"2:4860:2434":{"crate_id":2,"path":["core","io","borrowed_buf","BorrowedBuf"],"kind":"struct"},"1:5431:2602":{"crate_id":1,"path":["std","sync","mpsc","Sender"],"kind":"struct"},"2:41749:2534":{"crate_id":2,"path":["core","panic","location","Location"],"kind":"struct"},"6:1107:9545":{"crate_id":6,"path":["libc","unix","bsd","regmatch_t"],"kind":"struct"},"17:9070:13329":{"crate_id":17,"path":["object","endian","LittleEndian"],"kind":"struct"},"17:11910:16550":{"crate_id":17,"path":["object","elf","FileHeader64"],"kind":"struct"},"2:22450:2459":{"crate_id":2,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:10846:20151":{"crate_id":1,"path":["std","sys_common","wtf8","CodePoint"],"kind":"struct"},"17:10698:13686":{"crate_id":17,"path":["object","read","macho","file","MachOFile"],"kind":"struct"},"2:10079:20864":{"crate_id":2,"path":["core","slice","sort","merge_sort","BufGuard"],"kind":"struct"},"5:6984:27034":{"crate_id":5,"path":["alloc","vec","dedup_by","FillGapOnDrop"],"kind":"struct"},"1:1579:2250":{"crate_id":1,"path":["std","collections","hash","set","Difference"],"kind":"struct"},"2:39261:221":{"crate_id":2,"path":["core","ops","range","RangeFull"],"kind":"struct"},"2:4901:856":{"crate_id":2,"path":["core","iter"],"kind":"module"},"2:2161:637":{"crate_id":2,"path":["core","ptr","drop_in_place"],"kind":"function"},"2:3410:70":{"crate_id":2,"path":["core","any","Any"],"kind":"trait"},"2:44009:7939":{"crate_id":2,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:1557:2229":{"crate_id":1,"path":["std","collections","hash","set","Iter"],"kind":"struct"},"1:10799:2112":{"crate_id":1,"path":["std","sys_common","once","queue","Once"],"kind":"struct"},"6:4737:11938":{"crate_id":6,"path":["libc","unix","bsd","apple","processor_set_load_info"],"kind":"struct"},"2:22699:197":{"crate_id":2,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"2:43545:7891":{"crate_id":2,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"6:475:9132":{"crate_id":6,"path":["libc","unix","group"],"kind":"struct"},"2:40442:8225":{"crate_id":2,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"17:14378:17872":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig64"],"kind":"struct"},"1:5786:228":{"crate_id":1,"path":["std","sync","mpmc","counter","Receiver"],"kind":"struct"},"16:6189:28799":{"crate_id":16,"path":["gimli","read","cfi","PointerEncodingParameters"],"kind":"struct"},"2:45776:2667":{"crate_id":2,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"17:11788:13768":{"crate_id":17,"path":["object","archive","Header"],"kind":"struct"},"5:7223:2266":{"crate_id":5,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2214:134":{"crate_id":1,"path":["std","fs","File"],"kind":"struct"},"2:43419:23767":{"crate_id":2,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"16:2305:12404":{"crate_id":16,"path":["gimli","common","Vendor"],"kind":"enum"},"2:12816:25893":{"crate_id":2,"path":["core","future","join","MaybeDone"],"kind":"enum"},"5:4196:2388":{"crate_id":5,"path":["alloc","collections","vec_deque","into_iter","try_rfold","Guard"],"kind":"struct"},"6:569:9144":{"crate_id":6,"path":["libc","unix","sigval"],"kind":"struct"},"6:495:9135":{"crate_id":6,"path":["libc","unix","timespec"],"kind":"struct"},"2:7529:142":{"crate_id":2,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"16:4641:12989":{"crate_id":16,"path":["gimli","constants","DwVirtuality"],"kind":"struct"},"2:22424:2458":{"crate_id":2,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:6782:20621":{"crate_id":1,"path":["std","sys_common","backtrace","_print","DisplayBacktrace"],"kind":"struct"},"2:43842:7942":{"crate_id":2,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:1564:2233":{"crate_id":1,"path":["std","collections","hash","set","Drain"],"kind":"struct"},"2:41601:2445":{"crate_id":2,"path":["core","net","socket_addr","SocketAddr"],"kind":"enum"},"2:41664:201":{"crate_id":2,"path":["core","option","Option"],"kind":"enum"},"1:10309:2366":{"crate_id":1,"path":["std","sys","unix","fs","OpenOptions"],"kind":"struct"},"5:5791:259":{"crate_id":5,"path":["alloc","string","ToString"],"kind":"trait"},"11:298:28436":{"crate_id":11,"path":["hashbrown","raw","RawIterRange"],"kind":"struct"},"2:41724:2229":{"crate_id":2,"path":["core","option","Iter"],"kind":"struct"},"2:43991:7938":{"crate_id":2,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:11445:20652":{"crate_id":1,"path":["std","backtrace_rs","print","PrintFmt"],"kind":"enum"},"1:8890:159":{"crate_id":1,"path":["std","time","Instant"],"kind":"struct"},"13:0:1877":{"crate_id":13,"path":["std_detect"],"kind":"module"},"1:5107:125":{"crate_id":1,"path":["std","path","Display"],"kind":"struct"},"2:44419:8517":{"crate_id":2,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"2:40057:8049":{"crate_id":2,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"17:12876:17077":{"crate_id":17,"path":["object","macho","DylibTableOfContents"],"kind":"struct"},"11:1635:28453":{"crate_id":11,"path":["hashbrown","scopeguard","ScopeGuard"],"kind":"struct"},"2:40861:8212":{"crate_id":2,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"6:4105:11882":{"crate_id":6,"path":["libc","unix","bsd","apple","load_command"],"kind":"struct"},"17:8848:13504":{"crate_id":17,"path":["object","common","RelocationKind"],"kind":"enum"},"1:10888:23474":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8CodePoints"],"kind":"struct"},"17:10430:13649":{"crate_id":17,"path":["object","read","elf","note","GnuPropertyIterator"],"kind":"struct"},"17:12765:17071":{"crate_id":17,"path":["object","macho","DylinkerCommand"],"kind":"struct"},"2:42750:114":{"crate_id":2,"path":["core","fmt","rt","Count"],"kind":"enum"},"1:4881:21270":{"crate_id":1,"path":["std","path","fmt","DebugHelper"],"kind":"struct"},"18:531:17923":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterState"],"kind":"struct"},"17:11137:13722":{"crate_id":17,"path":["object","read","pe","section","PeSection"],"kind":"struct"},"11:2351:2041":{"crate_id":11,"path":["hashbrown","table","IntoIter"],"kind":"struct"},"17:10059:13561":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbol"],"kind":"struct"},"2:32131:25685":{"crate_id":2,"path":["core","error","tags","MaybeSizedValue"],"kind":"struct"},"1:10650:2570":{"crate_id":1,"path":["std","sys","unix","process","process_inner","ExitStatusError"],"kind":"struct"},"1:8885:243":{"crate_id":1,"path":["std","sync","rwlock","RwLockWriteGuard"],"kind":"struct"},"11:822:2238":{"crate_id":11,"path":["hashbrown","map","RawEntryBuilderMut"],"kind":"struct"},"2:406:8355":{"crate_id":2,"path":["core","num","dec2flt","float","RawFloat"],"kind":"trait"},"17:13487:17812":{"crate_id":17,"path":["object","pe","ImageVxdHeader"],"kind":"struct"},"17:13868:17831":{"crate_id":17,"path":["object","pe","ImageAuxSymbolWeak"],"kind":"struct"},"17:11281:13748":{"crate_id":17,"path":["object","read","pe","relocation","RelocationBlockIterator"],"kind":"struct"},"16:7708:13414":{"crate_id":16,"path":["gimli","read","str","DebugStrOffsets"],"kind":"struct"},"1:11487:1219":{"crate_id":1,"path":["std","reference"],"kind":"primitive"},"2:22243:8354":{"crate_id":2,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"2:2793:255":{"crate_id":2,"path":["core","marker","Sync"],"kind":"trait"},"2:44423:8516":{"crate_id":2,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"6:1384:9682":{"crate_id":6,"path":["libc","unix","bsd","apple","sysdir_search_path_domain_mask_t"],"kind":"enum"},"17:13010:17086":{"crate_id":17,"path":["object","macho","LinkeditDataCommand"],"kind":"struct"},"2:46085:2645":{"crate_id":2,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"16:8134:13427":{"crate_id":16,"path":["gimli","read","unit","EntriesTree"],"kind":"struct"},"1:8807:21256":{"crate_id":1,"path":["std","sync","mpmc","select","Token"],"kind":"struct"},"2:44192:7962":{"crate_id":2,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"2:48162:7823":{"crate_id":2,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"2:44324:7949":{"crate_id":2,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"6:4191:11892":{"crate_id":6,"path":["libc","unix","bsd","apple","sockaddr_ndrv"],"kind":"struct"},"2:42175:93":{"crate_id":2,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"5:6827:7993":{"crate_id":5,"path":["alloc","vec","in_place_drop","InPlaceDstBufDrop"],"kind":"struct"},"16:2788:12425":{"crate_id":16,"path":["gimli","common","DebugStrOffsetsBase"],"kind":"struct"},"0:3:1759":{"crate_id":0,"path":["gnuplotter","hello"],"kind":"function"},"2:22963:189":{"crate_id":2,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"2:41588:2454":{"crate_id":2,"path":["core","net","parser","AddrParseError"],"kind":"struct"},"17:11000:13674":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbolTable"],"kind":"struct"},"2:4045:106":{"crate_id":2,"path":["core","asserting","Capture"],"kind":"struct"},"2:5474:2388":{"crate_id":2,"path":["core","iter","adapters","filter","next_chunk","Guard"],"kind":"struct"},"1:7656:2369":{"crate_id":1,"path":["std","fs","ReadDir"],"kind":"struct"},"17:10507:13622":{"crate_id":17,"path":["object","read","elf","version","VerdefIterator"],"kind":"struct"},"17:13667:17819":{"crate_id":17,"path":["object","pe","ImageNtHeaders64"],"kind":"struct"},"16:6279:13358":{"crate_id":16,"path":["gimli","read","endian_slice","EndianSlice"],"kind":"struct"},"17:11327:13759":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectoryTable"],"kind":"struct"},"1:863:2041":{"crate_id":1,"path":["std","collections","hash","map","IntoIter"],"kind":"struct"},"2:3949:2388":{"crate_id":2,"path":["core","array","Guard"],"kind":"struct"},"2:4137:8028":{"crate_id":2,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"2:1738:8314":{"crate_id":2,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"17:14282:17864":{"crate_id":17,"path":["object","pe","ImageHotPatchBase"],"kind":"struct"},"1:3470:23757":{"crate_id":1,"path":["std","io","Write","write_fmt","Adapter"],"kind":"struct"},"16:6346:13361":{"crate_id":16,"path":["gimli","read","abbrev","AbbreviationsCache"],"kind":"struct"},"17:11048:13738":{"crate_id":17,"path":["object","read","pe","file","PeFile"],"kind":"struct"},"14:160:12330":{"crate_id":14,"path":["rustc_demangle","Demangle"],"kind":"struct"},"5:1376:97":{"crate_id":5,"path":["alloc","collections","btree","map","BTreeMap"],"kind":"struct"},"2:4283:8013":{"crate_id":2,"path":["core","cell","BorrowError"],"kind":"struct"},"17:9455:29615":{"crate_id":17,"path":["object","read","any","SegmentIteratorInternal"],"kind":"enum"},"5:1505:2237":{"crate_id":5,"path":["alloc","collections","btree","map","IntoValues"],"kind":"struct"},"2:40116:8045":{"crate_id":2,"path":["core","char","EscapeDebugInner"],"kind":"enum"},"1:8089:2493":{"crate_id":1,"path":["std","os","unix","ucred","UCred"],"kind":"struct"},"16:2339:12406":{"crate_id":16,"path":["gimli","common","LineEncoding"],"kind":"struct"},"1:1590:2252":{"crate_id":1,"path":["std","collections","hash","set","Union"],"kind":"struct"},"2:44728:24561":{"crate_id":2,"path":["core","escape","EscapeIterInner"],"kind":"struct"},"1:4564:2482":{"crate_id":1,"path":["std","os","fd","raw","IntoRawFd"],"kind":"trait"},"18:521:17919":{"crate_id":18,"path":["memchr","memmem","prefilter","Prefilter"],"kind":"enum"},"2:10062:25783":{"crate_id":2,"path":["core","slice","sort","merge","MergeHole"],"kind":"struct"},"5:7590:7988":{"crate_id":5,"path":["alloc","vec","splice","Splice"],"kind":"struct"},"6:123:8815":{"crate_id":6,"path":["libc","unix","fpos_t"],"kind":"enum"},"16:7006:13391":{"crate_id":16,"path":["gimli","read","loclists","LocListIter"],"kind":"struct"},"2:40465:8239":{"crate_id":2,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"17:12934:17080":{"crate_id":17,"path":["object","macho","DylibReference"],"kind":"struct"},"1:10380:17962":{"crate_id":1,"path":["std","sys","unix","locks","pthread_mutex","AllocatedMutex"],"kind":"struct"},"1:1931:706":{"crate_id":1,"path":["std","ffi"],"kind":"module"},"2:5680:8224":{"crate_id":2,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"2:1672:1159":{"crate_id":2,"path":["core","ptr"],"kind":"module"},"1:9240:134":{"crate_id":1,"path":["std","sys","unix","fs","File"],"kind":"struct"},"17:10370:13594":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdatIterator"],"kind":"struct"},"16:7015:13392":{"crate_id":16,"path":["gimli","read","loclists","LocationListEntry"],"kind":"struct"},"17:11389:13523":{"crate_id":17,"path":["object","read","traits","NoDynamicRelocationIterator"],"kind":"struct"},"17:14478:17879":{"crate_id":17,"path":["object","pe","ImageSeparateDebugHeader"],"kind":"struct"},"2:40644:2404":{"crate_id":2,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"2:46183:2721":{"crate_id":2,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"6:4050:11878":{"crate_id":6,"path":["libc","unix","bsd","apple","mach_header"],"kind":"struct"},"16:6226:13355":{"crate_id":16,"path":["gimli","read","dwarf","DwarfPackage"],"kind":"struct"},"16:2380:12408":{"crate_id":16,"path":["gimli","common","DebugAbbrevOffset"],"kind":"struct"},"17:13851:17830":{"crate_id":17,"path":["object","pe","ImageAuxSymbolFunctionBeginEnd"],"kind":"struct"},"6:4815:11944":{"crate_id":6,"path":["libc","unix","bsd","apple","if_msghdr2"],"kind":"struct"},"2:30352:69":{"crate_id":2,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:10481:2309":{"crate_id":1,"path":["std","sys","unix","os","JoinPathsError"],"kind":"struct"},"2:41852:2229":{"crate_id":2,"path":["core","result","Iter"],"kind":"struct"},"16:8154:13428":{"crate_id":16,"path":["gimli","read","unit","EntriesTreeNode"],"kind":"struct"},"1:6339:2596":{"crate_id":1,"path":["std","sync","poison","PoisonError"],"kind":"struct"},"17:13422:17810":{"crate_id":17,"path":["object","pe","ImageDosHeader"],"kind":"struct"},"1:3404:2374":{"crate_id":1,"path":["std","io","Read"],"kind":"trait"},"16:6171:214":{"crate_id":16,"path":["gimli","read","cfi","Pointer"],"kind":"enum"},"5:2133:2174":{"crate_id":5,"path":["alloc","collections","btree","mem","replace","PanicGuard"],"kind":"struct"},"2:5622:8234":{"crate_id":2,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"17:13228:17101":{"crate_id":17,"path":["object","macho","NoteCommand"],"kind":"struct"},"16:4527:12971":{"crate_id":16,"path":["gimli","constants","DwDs"],"kind":"struct"},"17:12671:17064":{"crate_id":17,"path":["object","macho","Dylib"],"kind":"struct"},"1:932:2239":{"crate_id":1,"path":["std","collections","hash","map","RawEntryMut"],"kind":"enum"},"1:4618:2483":{"crate_id":1,"path":["std","os","fd","owned","OwnedFd"],"kind":"struct"},"1:483:20871":{"crate_id":1,"path":["std","thread","spawn_unchecked_","MaybeDangling"],"kind":"struct"},"16:5760:13342":{"crate_id":16,"path":["gimli","read","cfi","CieOrFde"],"kind":"enum"},"1:3710:2451":{"crate_id":1,"path":["std","net","tcp","TcpListener"],"kind":"struct"},"2:40352:8230":{"crate_id":2,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"2:22831:193":{"crate_id":2,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"17:9933:13569":{"crate_id":17,"path":["object","read","coff","file","CoffFile"],"kind":"struct"},"1:1561:2041":{"crate_id":1,"path":["std","collections","hash","set","IntoIter"],"kind":"struct"},"6:501:9136":{"crate_id":6,"path":["libc","unix","rlimit"],"kind":"struct"},"11:666:2229":{"crate_id":11,"path":["hashbrown","map","Iter"],"kind":"struct"},"2:44098:7958":{"crate_id":2,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"6:588:9147":{"crate_id":6,"path":["libc","unix","servent"],"kind":"struct"},"17:14324:17868":{"crate_id":17,"path":["object","pe","ImageAlpha64RuntimeFunctionEntry"],"kind":"struct"},"17:12959:17082":{"crate_id":17,"path":["object","macho","TwolevelHint"],"kind":"struct"},"6:4124:11884":{"crate_id":6,"path":["libc","unix","bsd","apple","sockaddr_inarp"],"kind":"struct"},"1:10452:17969":{"crate_id":1,"path":["std","sys","unix","locks","pthread_condvar","AllocatedCondvar"],"kind":"struct"},"2:1605:1474":{"crate_id":2,"path":["core","mem","size_of"],"kind":"function"},"6:4858:11946":{"crate_id":6,"path":["libc","unix","bsd","apple","mach_task_basic_info"],"kind":"struct"},"1:10959:17950":{"crate_id":1,"path":["std","sys_common","net","LookupHost"],"kind":"struct"},"16:8205:13432":{"crate_id":16,"path":["gimli","read","value","ValueType"],"kind":"enum"},"2:4463:8025":{"crate_id":2,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"16:5574:13331":{"crate_id":16,"path":["gimli","read","addr","DebugAddr"],"kind":"struct"},"17:12293:16575":{"crate_id":17,"path":["object","elf","HashHeader"],"kind":"struct"},"17:12098:16561":{"crate_id":17,"path":["object","elf","Rela32"],"kind":"struct"},"1:11488:13":{"crate_id":1,"path":["std","fn"],"kind":"primitive"},"2:12196:7923":{"crate_id":2,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:7563:2309":{"crate_id":1,"path":["std","env","JoinPathsError"],"kind":"struct"},"17:14335:17869":{"crate_id":17,"path":["object","pe","ImageAlphaRuntimeFunctionEntry"],"kind":"struct"},"17:10012:13519":{"crate_id":17,"path":["object","read","coff","symbol","SymbolTable"],"kind":"struct"},"2:25911:275":{"crate_id":2,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"17:9003:13509":{"crate_id":17,"path":["object","common","SymbolFlags"],"kind":"enum"},"17:13101:17092":{"crate_id":17,"path":["object","macho","BuildToolVersion"],"kind":"struct"},"6:4248:11898":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_time_constraint_policy"],"kind":"struct"},"2:41877:203":{"crate_id":2,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"2:10671:7913":{"crate_id":2,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:5299:2564":{"crate_id":1,"path":["std","process","Stdio"],"kind":"struct"},"2:7624:2019":{"crate_id":2,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"17:11617:13533":{"crate_id":17,"path":["object","read","Import"],"kind":"struct"},"17:13816:17827":{"crate_id":17,"path":["object","pe","ImageSymbolExBytes"],"kind":"struct"},"11:1145:2246":{"crate_id":11,"path":["hashbrown","map","OccupiedError"],"kind":"struct"},"1:10414:17933":{"crate_id":1,"path":["std","sys","unix","locks","pthread_rwlock","AllocatedRwLock"],"kind":"struct"},"2:22438:2457":{"crate_id":2,"path":["core","num","error","ParseIntError"],"kind":"struct"},"2:47949:2723":{"crate_id":2,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"16:7492:13400":{"crate_id":16,"path":["gimli","read","pubnames","PubNamesEntry"],"kind":"struct"},"2:39246:8290":{"crate_id":2,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:5624:2216":{"crate_id":1,"path":["std","sync","lazy_lock","LazyLock"],"kind":"struct"},"17:9959:13560":{"crate_id":17,"path":["object","read","coff","section","CoffSegmentIterator"],"kind":"struct"},"2:2992:7851":{"crate_id":2,"path":["core","ops","coroutine","Coroutine"],"kind":"trait"},"1:11461:404":{"crate_id":1,"path":["std","bool"],"kind":"primitive"},"17:9945:13565":{"crate_id":17,"path":["object","read","coff","section","SectionTable"],"kind":"struct"},"6:1129:9546":{"crate_id":6,"path":["libc","unix","bsd","utsname"],"kind":"struct"},"2:21897:2643":{"crate_id":2,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"2:44435:8519":{"crate_id":2,"path":["core","str","IsNotEmpty"],"kind":"struct"},"2:22351:8394":{"crate_id":2,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:8647:2041":{"crate_id":1,"path":["std","sync","mpsc","IntoIter"],"kind":"struct"},"2:43242:24346":{"crate_id":2,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"6:4170:11889":{"crate_id":6,"path":["libc","unix","bsd","apple","sembuf"],"kind":"struct"},"17:12154:16565":{"crate_id":17,"path":["object","elf","ProgramHeader64"],"kind":"struct"},"16:5648:13335":{"crate_id":16,"path":["gimli","read","cfi","EhHdrTableIter"],"kind":"struct"},"11:2074:2244":{"crate_id":11,"path":["hashbrown","set","OccupiedEntry"],"kind":"struct"},"2:8029:25680":{"crate_id":2,"path":["core","net","display_buffer","DisplayBuffer"],"kind":"struct"},"2:30296:2264":{"crate_id":2,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"6:3800:11861":{"crate_id":6,"path":["libc","unix","bsd","apple","kevent64_s"],"kind":"struct"},"2:41715:171":{"crate_id":2,"path":["core","option","Item"],"kind":"struct"},"2:2258:101":{"crate_id":2,"path":["core","borrow","BorrowMut"],"kind":"trait"},"6:3689:11850":{"crate_id":6,"path":["libc","unix","bsd","apple","pthread_condattr_t"],"kind":"struct"},"2:42805:133":{"crate_id":2,"path":["core","fmt","Error"],"kind":"struct"},"17:12513:17055":{"crate_id":17,"path":["object","macho","MachHeader64"],"kind":"struct"},"5:2962:27213":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Dying"],"kind":"enum"},"2:21334:8303":{"crate_id":2,"path":["core","core_simd","elements","mut_ptr","SimdMutPtr","from_exposed_addr"],"kind":"foreign_type"},"16:7621:13410":{"crate_id":16,"path":["gimli","read","rnglists","RawRngListEntry"],"kind":"enum"},"2:43558:7892":{"crate_id":2,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"17:11316:13749":{"crate_id":17,"path":["object","read","pe","resource","ResourceDirectory"],"kind":"struct"},"17:13055:17089":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand64"],"kind":"struct"},"11:2467:24415":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMask"],"kind":"struct"},"2:21149:2377":{"crate_id":2,"path":["core","core_simd","cast","sealed","Sealed"],"kind":"trait"},"11:2473:28449":{"crate_id":11,"path":["hashbrown","raw","bitmask","BitMaskIter"],"kind":"struct"},"2:2904:8279":{"crate_id":2,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:10813:20887":{"crate_id":1,"path":["std","sys_common","once","queue","WaiterQueue"],"kind":"struct"},"2:22372:8391":{"crate_id":2,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"16:2881:12429":{"crate_id":16,"path":["gimli","common","DebugFrameOffset"],"kind":"struct"},"17:11306:13536":{"crate_id":17,"path":["object","read","pe","relocation","Relocation"],"kind":"struct"},"5:1674:27033":{"crate_id":5,"path":["alloc","collections","btree","map","drop","DropGuard"],"kind":"struct"},"6:4751:11940":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_basic_info"],"kind":"struct"},"2:32145:8427":{"crate_id":2,"path":["core","error","Source"],"kind":"struct"},"11:1072:28461":{"crate_id":11,"path":["hashbrown","map","KeyOrRef"],"kind":"enum"},"2:13037:150":{"crate_id":2,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"17:14076:17850":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryString"],"kind":"struct"},"16:2428:12410":{"crate_id":16,"path":["gimli","common","DebugAddrIndex"],"kind":"struct"},"2:10521:7918":{"crate_id":2,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"16:7568:13407":{"crate_id":16,"path":["gimli","read","rnglists","DebugRngLists"],"kind":"struct"},"16:6792:13382":{"crate_id":16,"path":["gimli","read","line","IncompleteLineProgram"],"kind":"struct"},"9:507:12153":{"crate_id":9,"path":["miniz_oxide","StreamResult"],"kind":"struct"},"2:21458:2650":{"crate_id":2,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"6:1023:9537":{"crate_id":6,"path":["libc","unix","bsd","passwd"],"kind":"struct"},"2:1667:2281":{"crate_id":2,"path":["core","mem","SizedTypeProperties"],"kind":"trait"},"16:6742:12348":{"crate_id":16,"path":["gimli","read","line","LineSequence"],"kind":"struct"},"2:12424:116":{"crate_id":2,"path":["core","str","lossy","Debug"],"kind":"struct"},"2:40265:2345":{"crate_id":2,"path":["core","ffi","VaList"],"kind":"struct"},"2:10271:2377":{"crate_id":2,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"2:43860:7943":{"crate_id":2,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"6:3767:9093":{"crate_id":6,"path":["libc","unix","bsd","apple","statvfs"],"kind":"struct"},"16:7694:13413":{"crate_id":16,"path":["gimli","read","str","DebugStr"],"kind":"struct"},"14:187:12338":{"crate_id":14,"path":["rustc_demangle","SizeLimitedFmtAdapter"],"kind":"struct"},"16:6545:13375":{"crate_id":16,"path":["gimli","read","index","UnitIndexSection"],"kind":"struct"},"9:393:12151":{"crate_id":9,"path":["miniz_oxide","MZFlush"],"kind":"enum"},"2:12843:212":{"crate_id":2,"path":["core","future","pending","Pending"],"kind":"struct"},"17:12846:17076":{"crate_id":17,"path":["object","macho","DysymtabCommand"],"kind":"struct"},"17:1184:13570":{"crate_id":17,"path":["object","read","coff","relocation","CoffRelocationIterator"],"kind":"struct"},"2:46709:2710":{"crate_id":2,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"2:39365:224":{"crate_id":2,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:5194:2561":{"crate_id":1,"path":["std","process","ChildStdin"],"kind":"struct"},"11:1850:2233":{"crate_id":11,"path":["hashbrown","set","Drain"],"kind":"struct"},"11:2317:2229":{"crate_id":11,"path":["hashbrown","table","Iter"],"kind":"struct"},"17:13259:17103":{"crate_id":17,"path":["object","macho","Nlist64"],"kind":"struct"},"6:483:9133":{"crate_id":6,"path":["libc","unix","utimbuf"],"kind":"struct"},"2:43956:7941":{"crate_id":2,"path":["core","str","iter","LinesAny"],"kind":"struct"},"5:6651:25013":{"crate_id":5,"path":["alloc","vec","into_iter","NonDrop"],"kind":"trait"},"16:7782:13418":{"crate_id":16,"path":["gimli","read","unit","DebugInfoUnitHeadersIter"],"kind":"struct"},"1:3905:2464":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStringExt"],"kind":"trait"},"1:918:2236":{"crate_id":1,"path":["std","collections","hash","map","IntoKeys"],"kind":"struct"},"6:533:9139":{"crate_id":6,"path":["libc","unix","hostent"],"kind":"struct"},"5:2245:27147":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafRange"],"kind":"struct"},"2:42097:92":{"crate_id":2,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"17:3232:13668":{"crate_id":17,"path":["object","read","macho","section","MachOSectionIterator"],"kind":"struct"},"6:4353:11910":{"crate_id":6,"path":["libc","unix","bsd","apple","proc_vnodepathinfo"],"kind":"struct"},"6:3637:11848":{"crate_id":6,"path":["libc","unix","bsd","apple","addrinfo"],"kind":"struct"},"2:47803:2717":{"crate_id":2,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"17:2150:13635":{"crate_id":17,"path":["object","read","elf","relocation","ElfRelaIterator"],"kind":"enum"},"1:4641:2478":{"crate_id":1,"path":["std","os","fd","owned","AsFd"],"kind":"trait"},"16:4889:13069":{"crate_id":16,"path":["gimli","constants","DwDsc"],"kind":"struct"},"17:13546:17813":{"crate_id":17,"path":["object","pe","MaskedRichHeaderEntry"],"kind":"struct"},"1:10485:20265":{"crate_id":1,"path":["std","sys","unix","os_str","Buf"],"kind":"struct"},"5:4428:27044":{"crate_id":5,"path":["alloc","collections","vec_deque","truncate","Dropper"],"kind":"struct"},"17:13148:17095":{"crate_id":17,"path":["object","macho","SymsegCommand"],"kind":"struct"},"18:644:29632":{"crate_id":18,"path":["memchr","memmem","x86","avx","nostd","Forward"],"kind":"struct"},"6:4881:11949":{"crate_id":6,"path":["libc","unix","bsd","apple","sockaddr_vm"],"kind":"struct"},"6:3903:11869":{"crate_id":6,"path":["libc","unix","bsd","apple","rt_msghdr2"],"kind":"struct"},"5:1304:2246":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedError"],"kind":"struct"},"2:11313:7899":{"crate_id":2,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"2:30336:8265":{"crate_id":2,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"2:39277:218":{"crate_id":2,"path":["core","ops","range","Range"],"kind":"struct"},"1:8075:2445":{"crate_id":1,"path":["std","os","unix","net","addr","SocketAddr"],"kind":"struct"},"16:4921:13077":{"crate_id":16,"path":["gimli","constants","DwIdx"],"kind":"struct"},"17:12043:16557":{"crate_id":17,"path":["object","elf","Sym64"],"kind":"struct"},"17:10316:13602":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbolTable"],"kind":"struct"},"1:9846:2574":{"crate_id":1,"path":["std","sys","unix","pipe","AnonPipe"],"kind":"struct"},"18:582:8061":{"crate_id":18,"path":["memchr","memmem","twoway","Reverse"],"kind":"struct"},"17:10637:13659":{"crate_id":17,"path":["object","read","elf","attributes","AttributeReader"],"kind":"struct"},"1:8623:2571":{"crate_id":1,"path":["std","process","ExitCode"],"kind":"struct"},"17:0:1887":{"crate_id":17,"path":["object"],"kind":"module"},"6:1113:1069":{"crate_id":6,"path":["libc","unix","bsd","option"],"kind":"struct"},"2:43042:24571":{"crate_id":2,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"5:5997:8734":{"crate_id":5,"path":["alloc","sync","ArcInner"],"kind":"struct"},"17:10366:13607":{"crate_id":17,"path":["object","read","elf","relocation","RelocationSections"],"kind":"struct"},"7:0:1662":{"crate_id":7,"path":["unwind"],"kind":"module"},"16:6261:13357":{"crate_id":16,"path":["gimli","read","dwarf","RangeIter"],"kind":"struct"},"16:6893:28816":{"crate_id":16,"path":["gimli","read","lists","ListsHeader"],"kind":"struct"},"6:3761:11858":{"crate_id":6,"path":["libc","unix","bsd","apple","radvisory"],"kind":"struct"},"1:7326:13498":{"crate_id":1,"path":["std","backtrace_rs","symbolize","Symbol"],"kind":"struct"},"2:3289:7850":{"crate_id":2,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"5:784:2253":{"crate_id":5,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"2:42503:7868":{"crate_id":2,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"5:2051:2270":{"crate_id":5,"path":["alloc","collections","btree","map","CursorMut"],"kind":"struct"},"1:8081:2450":{"crate_id":1,"path":["std","os","unix","net","listener","Incoming"],"kind":"struct"},"17:12645:17062":{"crate_id":17,"path":["object","macho","Fvmlib"],"kind":"struct"},"16:6425:13368":{"crate_id":16,"path":["gimli","read","aranges","ArangeHeader"],"kind":"struct"},"2:43590:7909":{"crate_id":2,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"6:1054:9540":{"crate_id":6,"path":["libc","unix","bsd","tm"],"kind":"struct"},"1:8967:21976":{"crate_id":1,"path":["std","sys","common","thread_local","fast_local","DtorState"],"kind":"enum"},"17:261:29609":{"crate_id":17,"path":["object","read","util","DebugLen"],"kind":"struct"},"1:10573:20885":{"crate_id":1,"path":["std","sys","unix","process","process_inner","do_exec","Reset"],"kind":"struct"},"17:12422:17051":{"crate_id":17,"path":["object","macho","DyldCacheMappingInfo"],"kind":"struct"},"2:44076:7957":{"crate_id":2,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"2:7248:2431":{"crate_id":2,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"16:2744:12423":{"crate_id":16,"path":["gimli","common","DebugRngListsIndex"],"kind":"struct"},"16:7284:2534":{"crate_id":16,"path":["gimli","read","op","Location"],"kind":"enum"},"17:11201:13719":{"crate_id":17,"path":["object","read","pe","export","ExportTable"],"kind":"struct"},"1:4562:2481":{"crate_id":1,"path":["std","os","fd","raw","FromRawFd"],"kind":"trait"},"2:40372:8232":{"crate_id":2,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"2:46161:2715":{"crate_id":2,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"16:2907:12430":{"crate_id":16,"path":["gimli","common","EhFrameOffset"],"kind":"struct"},"2:48201:7824":{"crate_id":2,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"6:3976:11873":{"crate_id":6,"path":["libc","unix","bsd","apple","proc_taskinfo"],"kind":"struct"},"2:20968:25300":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"6:3739:11855":{"crate_id":6,"path":["libc","unix","bsd","apple","fpunchhole_t"],"kind":"struct"},"2:22311:8353":{"crate_id":2,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"17:14068:17849":{"crate_id":17,"path":["object","pe","ImageResourceDirectoryEntry"],"kind":"struct"},"2:42282:88":{"crate_id":2,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"2:3034:2018":{"crate_id":2,"path":["core","ops","drop","Drop"],"kind":"trait"},"16:6696:12349":{"crate_id":16,"path":["gimli","read","line","LineRow"],"kind":"struct"},"16:5798:13343":{"crate_id":16,"path":["gimli","read","cfi","Augmentation"],"kind":"struct"},"9:426:12152":{"crate_id":9,"path":["miniz_oxide","MZStatus"],"kind":"enum"},"1:8653:2608":{"crate_id":1,"path":["std","sync","mpsc","SendError"],"kind":"struct"},"6:4229:11895":{"crate_id":6,"path":["libc","unix","bsd","apple","ntptimeval"],"kind":"struct"},"5:3144:98":{"crate_id":5,"path":["alloc","collections","btree","set","BTreeSet"],"kind":"struct"},"16:6944:28507":{"crate_id":16,"path":["gimli","read","loclists","LocListsFormat"],"kind":"enum"},"2:43650:7937":{"crate_id":2,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"6:4243:11897":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_extended_policy"],"kind":"struct"},"1:9700:17958":{"crate_id":1,"path":["std","sys","unix","os","Env"],"kind":"struct"},"2:4352:8021":{"crate_id":2,"path":["core","cell","BorrowRef"],"kind":"struct"},"2:44304:7948":{"crate_id":2,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"2:8771:7923":{"crate_id":2,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"18:515:17922":{"crate_id":18,"path":["memchr","memmem","prefilter","PrefilterFn"],"kind":"struct"},"1:2582:20864":{"crate_id":1,"path":["std","io","buffered","bufwriter","flush_buf","BufGuard"],"kind":"struct"},"2:2173:8304":{"crate_id":2,"path":["core","ptr","from_exposed_addr_mut"],"kind":"function"},"2:318:8336":{"crate_id":2,"path":["core","num","bignum","FullOps"],"kind":"trait"},"17:11971:16553":{"crate_id":17,"path":["object","elf","SectionHeader64"],"kind":"struct"},"1:11111:2124":{"crate_id":1,"path":["std","panicking","panic_count","MustAbort"],"kind":"enum"},"2:41452:2444":{"crate_id":2,"path":["core","net","ip_addr","Ipv6MulticastScope"],"kind":"enum"},"2:45900:2720":{"crate_id":2,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"2:3038:136":{"crate_id":2,"path":["core","ops","function","Fn"],"kind":"trait"},"2:22388:8396":{"crate_id":2,"path":["core","num","fmt","Part"],"kind":"enum"},"17:10661:13705":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldSubCache"],"kind":"struct"},"17:10420:13648":{"crate_id":17,"path":["object","read","elf","note","Note"],"kind":"struct"},"16:6204:13354":{"crate_id":16,"path":["gimli","read","dwarf","Dwarf"],"kind":"struct"},"2:42787:69":{"crate_id":2,"path":["core","fmt","Alignment"],"kind":"enum"},"2:6265:24516":{"crate_id":2,"path":["core","iter","adapters","map_windows","MapWindowsInner"],"kind":"struct"},"17:9711:29612":{"crate_id":17,"path":["object","read","any","SymbolIteratorInternal"],"kind":"enum"},"5:3737:2270":{"crate_id":5,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"2:4407:8023":{"crate_id":2,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"16:2864:12428":{"crate_id":16,"path":["gimli","common","DebugTypeSignature"],"kind":"struct"},"17:10672:13706":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImageIterator"],"kind":"struct"},"17:11761:13539":{"crate_id":17,"path":["object","read","CompressedData"],"kind":"struct"},"2:44144:7961":{"crate_id":2,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:6225:2112":{"crate_id":1,"path":["std","sync","once","Once"],"kind":"struct"},"17:11098:13725":{"crate_id":17,"path":["object","read","pe","section","PeSegmentIterator"],"kind":"struct"},"11:2368:2233":{"crate_id":11,"path":["hashbrown","table","Drain"],"kind":"struct"},"2:46307:2681":{"crate_id":2,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"6:3998:11874":{"crate_id":6,"path":["libc","unix","bsd","apple","proc_bsdinfo"],"kind":"struct"},"5:1494:2236":{"crate_id":5,"path":["alloc","collections","btree","map","IntoKeys"],"kind":"struct"},"16:6485:13371":{"crate_id":16,"path":["gimli","read","index","DebugCuIndex"],"kind":"struct"},"5:7252:2233":{"crate_id":5,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"6:4647:11928":{"crate_id":6,"path":["libc","unix","bsd","apple","dirent"],"kind":"struct"},"8:0:1879":{"crate_id":8,"path":["cfg_if"],"kind":"module"},"1:7947:2433":{"crate_id":1,"path":["std","io","util","Sink"],"kind":"struct"},"11:759:2231":{"crate_id":11,"path":["hashbrown","map","Keys"],"kind":"struct"},"2:40504:8242":{"crate_id":2,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"16:7534:13404":{"crate_id":16,"path":["gimli","read","pubtypes","DebugPubTypes"],"kind":"struct"},"2:46329:2687":{"crate_id":2,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"16:6332:13360":{"crate_id":16,"path":["gimli","read","abbrev","DebugAbbrev"],"kind":"struct"},"2:6862:2049":{"crate_id":2,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"6:5264:12101":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","x86_64","malloc_zone_t"],"kind":"struct"},"6:4041:11877":{"crate_id":6,"path":["libc","unix","bsd","apple","xucred"],"kind":"struct"},"17:13876:17832":{"crate_id":17,"path":["object","pe","ImageAuxSymbolSection"],"kind":"struct"},"5:1259:2243":{"crate_id":5,"path":["alloc","collections","btree","map","entry","Entry"],"kind":"enum"},"17:9521:13516":{"crate_id":17,"path":["object","read","any","SectionIterator"],"kind":"struct"},"17:10616:13657":{"crate_id":17,"path":["object","read","elf","attributes","AttributesSubsubsection"],"kind":"struct"},"1:1986:204":{"crate_id":1,"path":["std","ffi","os_str","OsStr"],"kind":"struct"},"17:10750:13665":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandIterator"],"kind":"struct"},"1:7661:2366":{"crate_id":1,"path":["std","fs","OpenOptions"],"kind":"struct"},"16:6960:13389":{"crate_id":16,"path":["gimli","read","loclists","RawLocListIter"],"kind":"struct"},"17:13802:17826":{"crate_id":17,"path":["object","pe","ImageSymbolEx"],"kind":"struct"},"1:11470:1597":{"crate_id":1,"path":["std","tuple"],"kind":"primitive"},"2:44427:8520":{"crate_id":2,"path":["core","str","IsWhitespace"],"kind":"struct"},"2:42482:7859":{"crate_id":2,"path":["core","fmt","num","Binary"],"kind":"struct"},"2:22:734":{"crate_id":2,"path":["core","format_args"],"kind":"macro"},"16:8050:13423":{"crate_id":16,"path":["gimli","read","unit","Attribute"],"kind":"struct"},"2:2855:8273":{"crate_id":2,"path":["core","ops","arith","Mul"],"kind":"trait"},"2:40292:7891":{"crate_id":2,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"2:2884:8277":{"crate_id":2,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"2:40081:8052":{"crate_id":2,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"2:2629:133":{"crate_id":2,"path":["core","error","Error"],"kind":"trait"},"1:3645:2448":{"crate_id":1,"path":["std","net","socket_addr","ToSocketAddrs"],"kind":"trait"},"17:11507:13528":{"crate_id":17,"path":["object","read","SymbolSection"],"kind":"enum"},"2:22897:191":{"crate_id":2,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"2:43710:7912":{"crate_id":2,"path":["core","str","iter","RSplit"],"kind":"struct"},"2:44415:8515":{"crate_id":2,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"2:12211:7924":{"crate_id":2,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"16:4462:12954":{"crate_id":16,"path":["gimli","constants","DwAte"],"kind":"struct"},"1:1067:2245":{"crate_id":1,"path":["std","collections","hash","map","VacantEntry"],"kind":"struct"},"17:10278:13596":{"crate_id":17,"path":["object","read","elf","section","ElfSection"],"kind":"struct"},"11:1846:2041":{"crate_id":11,"path":["hashbrown","set","IntoIter"],"kind":"struct"},"6:4276:11903":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_throughput_qos_policy"],"kind":"struct"},"2:39426:7996":{"crate_id":2,"path":["core","any","TypeId"],"kind":"struct"},"1:8631:2229":{"crate_id":1,"path":["std","sync","mpsc","Iter"],"kind":"struct"},"2:40128:8046":{"crate_id":2,"path":["core","char","ToLowercase"],"kind":"struct"},"1:2223:2349":{"crate_id":1,"path":["std","fs","read_to_string"],"kind":"function"},"1:4485:2468":{"crate_id":1,"path":["std","os","macos","fs","MetadataExt"],"kind":"trait"},"1:7678:2367":{"crate_id":1,"path":["std","fs","Permissions"],"kind":"struct"},"1:8772:20468":{"crate_id":1,"path":["std","sync","mpmc","error","SendTimeoutError"],"kind":"enum"},"6:3604:11845":{"crate_id":6,"path":["libc","unix","bsd","apple","ip_mreq_source"],"kind":"struct"},"17:2178:13595":{"crate_id":17,"path":["object","read","elf","relocation","ElfDynamicRelocationIterator"],"kind":"struct"},"1:1924:2321":{"crate_id":1,"path":["std","error","Indented"],"kind":"struct"},"1:8021:2402":{"crate_id":1,"path":["std","io","Lines"],"kind":"struct"},"17:13085:17091":{"crate_id":17,"path":["object","macho","BuildVersionCommand"],"kind":"struct"},"17:10478:13646":{"crate_id":17,"path":["object","read","elf","version","Version"],"kind":"struct"},"2:10453:2230":{"crate_id":2,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:3479:2375":{"crate_id":1,"path":["std","io","Seek"],"kind":"trait"},"17:10685:13664":{"crate_id":17,"path":["object","read","macho","dyld_cache","DyldCacheImage"],"kind":"struct"},"1:8038:2441":{"crate_id":1,"path":["std","net","Shutdown"],"kind":"enum"},"2:46945:2676":{"crate_id":2,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"10:44:12260":{"crate_id":10,"path":["adler","Adler32"],"kind":"struct"},"2:1635:636":{"crate_id":2,"path":["core","mem","drop"],"kind":"function"},"2:47055:2737":{"crate_id":2,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"17:8978:13508":{"crate_id":17,"path":["object","common","SectionFlags"],"kind":"enum"},"19:0:1100":{"crate_id":19,"path":["panic_unwind"],"kind":"module"},"2:7024:2261":{"crate_id":2,"path":["core","iter","adapters","SourceIter"],"kind":"trait"},"2:40381:8233":{"crate_id":2,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"2:44715:7834":{"crate_id":2,"path":["core","alloc","AllocError"],"kind":"struct"},"2:2919:8283":{"crate_id":2,"path":["core","ops","bit","Shl"],"kind":"trait"},"2:44219:7963":{"crate_id":2,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"2:42987:8074":{"crate_id":2,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:3183:2424":{"crate_id":1,"path":["std","io","stdio","Stdin"],"kind":"struct"},"17:9912:13550":{"crate_id":17,"path":["object","read","archive","ArchiveMember"],"kind":"struct"},"6:3940:11871":{"crate_id":6,"path":["libc","unix","bsd","apple","sf_hdtr"],"kind":"struct"},"6:3859:11866":{"crate_id":6,"path":["libc","unix","bsd","apple","ifma_msghdr2"],"kind":"struct"},"2:32120:20417":{"crate_id":2,"path":["core","error","private","Internal"],"kind":"struct"},"1:5370:2567":{"crate_id":1,"path":["std","process","Termination"],"kind":"trait"},"6:4944:11956":{"crate_id":6,"path":["libc","unix","bsd","apple","semun"],"kind":"union"},"1:1895:2320":{"crate_id":1,"path":["std","error","Report"],"kind":"struct"},"2:47411:2705":{"crate_id":2,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"6:4359:11911":{"crate_id":6,"path":["libc","unix","bsd","apple","vm_statistics"],"kind":"struct"},"18:652:29632":{"crate_id":18,"path":["memchr","memmem","x86","sse","Forward"],"kind":"struct"},"1:907:2234":{"crate_id":1,"path":["std","collections","hash","map","ExtractIf"],"kind":"struct"},"17:10726:13708":{"crate_id":17,"path":["object","read","macho","file","MachOComdat"],"kind":"struct"},"9:357:12166":{"crate_id":9,"path":["miniz_oxide","inflate","TINFLStatus"],"kind":"enum"},"17:9752:13521":{"crate_id":17,"path":["object","read","any","DynamicRelocationIterator"],"kind":"struct"},"6:5158:12094":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","x86_64","__darwin_mcontext64"],"kind":"struct"},"11:483:152":{"crate_id":11,"path":["hashbrown","map","HashMap"],"kind":"struct"},"2:4035:264":{"crate_id":2,"path":["core","asserting","TryCapturePrintable"],"kind":"trait"},"1:10876:18029":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8"],"kind":"struct"},"16:7597:28502":{"crate_id":16,"path":["gimli","read","rnglists","RangeListsFormat"],"kind":"enum"},"16:7523:13403":{"crate_id":16,"path":["gimli","read","pubtypes","PubTypesEntry"],"kind":"struct"},"1:8639:2611":{"crate_id":1,"path":["std","sync","mpsc","TryIter"],"kind":"struct"},"1:10168:2114":{"crate_id":1,"path":["std","sys","unix","thread","Thread"],"kind":"struct"},"2:2361:202":{"crate_id":2,"path":["core","cmp","Ord"],"kind":"trait"},"17:14042:17847":{"crate_id":17,"path":["object","pe","ImageDelayloadDescriptor"],"kind":"struct"},"6:4422:11915":{"crate_id":6,"path":["libc","unix","bsd","apple","rusage_info_v2"],"kind":"struct"},"2:6270:24546":{"crate_id":2,"path":["core","iter","adapters","map_windows","Buffer"],"kind":"struct"},"18:755:17918":{"crate_id":18,"path":["memchr","memmem","SearcherRev"],"kind":"struct"},"16:6968:13390":{"crate_id":16,"path":["gimli","read","loclists","RawLocListEntry"],"kind":"enum"},"5:6666:27033":{"crate_id":5,"path":["alloc","vec","into_iter","drop","DropGuard"],"kind":"struct"},"17:12830:17075":{"crate_id":17,"path":["object","macho","SymtabCommand"],"kind":"struct"},"1:7249:20603":{"crate_id":1,"path":["std","panicking","begin_panic_handler","StaticStrPayload"],"kind":"struct"},"17:10628:13658":{"crate_id":17,"path":["object","read","elf","attributes","AttributeIndexIterator"],"kind":"struct"},"17:10447:12267":{"crate_id":17,"path":["object","read","elf","hash","HashTable"],"kind":"struct"},"1:1842:2306":{"crate_id":1,"path":["std","env","ArgsOs"],"kind":"struct"},"18:766:17911":{"crate_id":18,"path":["memchr","memmem","SearcherRevKind"],"kind":"enum"},"16:6401:13366":{"crate_id":16,"path":["gimli","read","aranges","DebugAranges"],"kind":"struct"},"1:5993:21226":{"crate_id":1,"path":["std","sync","mpmc","zero","ZeroToken"],"kind":"struct"},"2:2838:110":{"crate_id":2,"path":["core","marker","ConstParamTy"],"kind":"trait"},"2:21450:2377":{"crate_id":2,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"16:6879:13385":{"crate_id":16,"path":["gimli","read","line","FileEntryFormat"],"kind":"struct"},"2:4822:25804":{"crate_id":2,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"16:2504:12413":{"crate_id":16,"path":["gimli","common","DebugLineOffset"],"kind":"struct"},"5:880:2255":{"crate_id":5,"path":["alloc","collections","binary_heap","Hole"],"kind":"struct"},"16:7503:13401":{"crate_id":16,"path":["gimli","read","pubnames","DebugPubNames"],"kind":"struct"},"14:0:1884":{"crate_id":14,"path":["rustc_demangle"],"kind":"module"},"1:943:2240":{"crate_id":1,"path":["std","collections","hash","map","RawOccupiedEntryMut"],"kind":"struct"},"6:5244:12098":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","x86_64","__darwin_mmst_reg"],"kind":"struct"},"2:4640:8038":{"crate_id":2,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"2:41481:24574":{"crate_id":2,"path":["core","net","ip_addr","fmt","Span"],"kind":"struct"},"2:2880:2640":{"crate_id":2,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"2:22326:8377":{"crate_id":2,"path":["core","num","diy_float","Fp"],"kind":"struct"},"5:3180:2250":{"crate_id":5,"path":["alloc","collections","btree","set","Difference"],"kind":"struct"},"2:21390:2377":{"crate_id":2,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"17:9350:13481":{"crate_id":17,"path":["object","read","util","ByteString"],"kind":"struct"},"2:3077:2283":{"crate_id":2,"path":["core","ops","index","IndexMut"],"kind":"trait"},"16:6513:13373":{"crate_id":16,"path":["gimli","read","index","UnitIndex"],"kind":"struct"},"17:10139:13585":{"crate_id":17,"path":["object","read","coff","import","ImportName"],"kind":"enum"},"1:7708:124":{"crate_id":1,"path":["std","fs","DirBuilder"],"kind":"struct"},"1:8577:2568":{"crate_id":1,"path":["std","process","CommandArgs"],"kind":"struct"},"6:4311:11907":{"crate_id":6,"path":["libc","unix","bsd","apple","vinfo_stat"],"kind":"struct"},"1:6695:20891":{"crate_id":1,"path":["std","sys","common","thread_local","abort_on_dtor_unwind","DtorUnwindGuard"],"kind":"struct"},"17:9896:13549":{"crate_id":17,"path":["object","read","archive","MemberHeader"],"kind":"enum"},"17:14033:17846":{"crate_id":17,"path":["object","pe","ImageBoundForwarderRef"],"kind":"struct"},"11:324:28446":{"crate_id":11,"path":["hashbrown","raw","RawIter"],"kind":"struct"},"1:11434:2214":{"crate_id":1,"path":["std","backtrace_rs","types","BytesOrWideString"],"kind":"enum"},"17:9277:13513":{"crate_id":17,"path":["object","endian","I64Bytes"],"kind":"struct"},"2:11896:8524":{"crate_id":2,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"2:3249:143":{"crate_id":2,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"17:10903:13671":{"crate_id":17,"path":["object","read","macho","segment","MachOSegmentIterator"],"kind":"struct"},"18:624:29637":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixOrdering"],"kind":"enum"},"2:48045:7816":{"crate_id":2,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"16:4986:13094":{"crate_id":16,"path":["gimli","constants","DwLns"],"kind":"struct"},"17:11719:13537":{"crate_id":17,"path":["object","read","CompressionFormat"],"kind":"enum"},"17:14013:17844":{"crate_id":17,"path":["object","pe","ImageImportDescriptor"],"kind":"struct"},"16:2618:12418":{"crate_id":16,"path":["gimli","common","DebugMacinfoOffset"],"kind":"struct"},"17:11448:13525":{"crate_id":17,"path":["object","read","ObjectKind"],"kind":"enum"},"6:4570:11683":{"crate_id":6,"path":["libc","unix","bsd","apple","kevent"],"kind":"struct"},"17:12911:17079":{"crate_id":17,"path":["object","macho","DylibModule64"],"kind":"struct"},"17:14355:17871":{"crate_id":17,"path":["object","pe","ImageEnclaveConfig32"],"kind":"struct"},"1:7259:20604":{"crate_id":1,"path":["std","panicking","begin_panic","Payload"],"kind":"struct"},"2:21575:2377":{"crate_id":2,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:7567:20417":{"crate_id":1,"path":["std","error","private","Internal"],"kind":"struct"},"17:13451:17811":{"crate_id":17,"path":["object","pe","ImageOs2Header"],"kind":"struct"},"17:10468:13651":{"crate_id":17,"path":["object","read","elf","version","VersionIndex"],"kind":"struct"},"11:1127:12273":{"crate_id":11,"path":["hashbrown","map","VacantEntryRef"],"kind":"struct"},"2:43814:7914":{"crate_id":2,"path":["core","str","iter","RSplitN"],"kind":"struct"},"2:23029:187":{"crate_id":2,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"17:9972:13559":{"crate_id":17,"path":["object","read","coff","section","CoffSegment"],"kind":"struct"},"6:4111:11883":{"crate_id":6,"path":["libc","unix","bsd","apple","sockaddr_dl"],"kind":"struct"},"17:9207:13511":{"crate_id":17,"path":["object","endian","I16Bytes"],"kind":"struct"},"2:2551:265":{"crate_id":2,"path":["core","convert","TryFrom"],"kind":"trait"},"17:14499:17880":{"crate_id":17,"path":["object","pe","NonPagedDebugInfo"],"kind":"struct"},"6:4345:11909":{"crate_id":6,"path":["libc","unix","bsd","apple","vnode_info_path"],"kind":"struct"},"1:7535:2247":{"crate_id":1,"path":["std","collections","hash","map","RandomState"],"kind":"struct"},"17:11815:13769":{"crate_id":17,"path":["object","archive","AixHeader"],"kind":"struct"},"6:4745:11939":{"crate_id":6,"path":["libc","unix","bsd","apple","time_value_t"],"kind":"struct"},"6:1013:9536":{"crate_id":6,"path":["libc","unix","bsd","sockaddr_in6"],"kind":"struct"},"17:11272:13757":{"crate_id":17,"path":["object","read","pe","import","DelayLoadDescriptorIterator"],"kind":"struct"},"2:44270:7965":{"crate_id":2,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"16:2450:12411":{"crate_id":16,"path":["gimli","common","DebugArangesOffset"],"kind":"struct"},"16:6361:13363":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviation"],"kind":"struct"},"5:2968:27071":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Mut"],"kind":"struct"},"2:4279:229":{"crate_id":2,"path":["core","cell","RefCell"],"kind":"struct"},"5:4076:2230":{"crate_id":5,"path":["alloc","collections","vec_deque","iter_mut","IterMut"],"kind":"struct"},"16:7318:13395":{"crate_id":16,"path":["gimli","read","op","Piece"],"kind":"struct"},"2:22275:8366":{"crate_id":2,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"5:897:2229":{"crate_id":5,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"5:3583:2229":{"crate_id":5,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"5:5372:7884":{"crate_id":5,"path":["alloc","slice","Concat"],"kind":"trait"},"1:8316:2552":{"crate_id":1,"path":["std","path","Components"],"kind":"struct"},"16:3315:12437":{"crate_id":16,"path":["gimli","arch","LoongArch"],"kind":"struct"},"3:234:234":{"crate_id":3,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"17:14024:17845":{"crate_id":17,"path":["object","pe","ImageBoundImportDescriptor"],"kind":"struct"},"2:2538:77":{"crate_id":2,"path":["core","convert","AsMut"],"kind":"trait"},"2:45931:2668":{"crate_id":2,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"2:2931:8285":{"crate_id":2,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"17:14163:17860":{"crate_id":17,"path":["object","pe","ImageEpilogueDynamicRelocationHeader"],"kind":"struct"},"1:3461:2322":{"crate_id":1,"path":["std","io","Write"],"kind":"trait"},"16:7090:28847":{"crate_id":16,"path":["gimli","read","lookup","PubStuffParser"],"kind":"struct"},"16:5419:13330":{"crate_id":16,"path":["gimli","endianity","BigEndian"],"kind":"struct"},"1:3422:2373":{"crate_id":1,"path":["std","io","IoSliceMut"],"kind":"struct"},"1:8717:2610":{"crate_id":1,"path":["std","sync","mpsc","TrySendError"],"kind":"enum"},"16:7269:28892":{"crate_id":16,"path":["gimli","read","op","OperationEvaluationResult"],"kind":"enum"},"2:3073:2282":{"crate_id":2,"path":["core","ops","index","Index"],"kind":"trait"},"17:14434:17875":{"crate_id":17,"path":["object","pe","ImageCoffSymbolsHeader"],"kind":"struct"},"2:4:1083":{"crate_id":2,"path":["core","panic"],"kind":"macro"},"5:7466:2328":{"crate_id":5,"path":["alloc","ffi","c_str","IntoStringError"],"kind":"struct"},"1:10683:2191":{"crate_id":1,"path":["std","sys","unix","thread_parking","darwin","Parker"],"kind":"struct"},"2:4288:8014":{"crate_id":2,"path":["core","cell","BorrowMutError"],"kind":"struct"},"17:10547:13653":{"crate_id":17,"path":["object","read","elf","version","VernauxIterator"],"kind":"struct"},"6:4731:11937":{"crate_id":6,"path":["libc","unix","bsd","apple","processor_set_basic_info"],"kind":"struct"},"1:11474:695":{"crate_id":1,"path":["std","f64"],"kind":"primitive"},"17:13188:17098":{"crate_id":17,"path":["object","macho","EntryPointCommand"],"kind":"struct"},"2:2888:8276":{"crate_id":2,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:1781:2289":{"crate_id":1,"path":["std","env","VarsOs"],"kind":"struct"},"1:10027:2568":{"crate_id":1,"path":["std","sys","unix","process","process_common","CommandArgs"],"kind":"struct"},"2:43246:7894":{"crate_id":2,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"5:3185:27113":{"crate_id":5,"path":["alloc","collections","btree","set","DifferenceInner"],"kind":"enum"},"14:40:16551":{"crate_id":14,"path":["rustc_demangle","v0","Ident"],"kind":"struct"},"17:13611:17817":{"crate_id":17,"path":["object","pe","ImageRomOptionalHeader"],"kind":"struct"},"17:11407:13524":{"crate_id":17,"path":["object","read","FileKind"],"kind":"enum"},"2:47663:2711":{"crate_id":2,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"2:44673:2783":{"crate_id":2,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"2:20996:25500":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"6:3849:11865":{"crate_id":6,"path":["libc","unix","bsd","apple","ifma_msghdr"],"kind":"struct"},"2:9623:7860":{"crate_id":2,"path":["core","fmt","Octal"],"kind":"trait"},"1:9920:109":{"crate_id":1,"path":["std","sys","unix","process","process_common","Command"],"kind":"struct"},"6:4722:11936":{"crate_id":6,"path":["libc","unix","bsd","apple","processor_basic_info"],"kind":"struct"},"2:41782:2535":{"crate_id":2,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"11:860:2241":{"crate_id":11,"path":["hashbrown","map","RawVacantEntryMut"],"kind":"struct"},"16:7768:13417":{"crate_id":16,"path":["gimli","read","unit","DebugInfo"],"kind":"struct"},"5:7453:2327":{"crate_id":5,"path":["alloc","ffi","c_str","FromVecWithNulError"],"kind":"struct"},"1:8234:2549":{"crate_id":1,"path":["std","path","State"],"kind":"enum"},"17:10456:13621":{"crate_id":17,"path":["object","read","elf","hash","GnuHashTable"],"kind":"struct"},"17:11393:133":{"crate_id":17,"path":["object","read","Error"],"kind":"struct"},"2:41418:2442":{"crate_id":2,"path":["core","net","ip_addr","Ipv4Addr"],"kind":"struct"},"17:11573:13531":{"crate_id":17,"path":["object","read","ObjectMap"],"kind":"struct"},"11:344:28450":{"crate_id":11,"path":["hashbrown","raw","FullBucketsIndices"],"kind":"struct"},"6:3812:11862":{"crate_id":6,"path":["libc","unix","bsd","apple","dqblk"],"kind":"struct"},"2:2866:8275":{"crate_id":2,"path":["core","ops","arith","Rem"],"kind":"trait"},"2:46131:2709":{"crate_id":2,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:4101:2491":{"crate_id":1,"path":["std","os","unix","net","datagram","UnixDatagram"],"kind":"struct"},"17:10126:13584":{"crate_id":17,"path":["object","read","coff","import","ImportFile"],"kind":"struct"},"5:5861:2233":{"crate_id":5,"path":["alloc","string","Drain"],"kind":"struct"},"17:14308:17866":{"crate_id":17,"path":["object","pe","ImageArmRuntimeFunctionEntry"],"kind":"struct"},"11:1541:12275":{"crate_id":11,"path":["hashbrown","rustc_entry","RustcOccupiedEntry"],"kind":"struct"},"6:4266:11901":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_background_policy"],"kind":"struct"},"1:11473:693":{"crate_id":1,"path":["std","f32"],"kind":"primitive"},"2:45882:2714":{"crate_id":2,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"17:2209:13620":{"crate_id":17,"path":["object","read","elf","relocation","ElfSectionRelocationIterator"],"kind":"struct"},"2:2255:100":{"crate_id":2,"path":["core","borrow","Borrow"],"kind":"trait"},"2:44127:7960":{"crate_id":2,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"2:2535:78":{"crate_id":2,"path":["core","convert","AsRef"],"kind":"trait"},"2:2783:2016":{"crate_id":2,"path":["core","marker","Sized"],"kind":"trait"},"2:12191:7927":{"crate_id":2,"path":["core","str","pattern"],"kind":"module"},"2:9621:125":{"crate_id":2,"path":["core","fmt","Display"],"kind":"trait"},"6:4763:11941":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_identifier_info"],"kind":"struct"},"5:7423:2329":{"crate_id":5,"path":["alloc","ffi","c_str","NulError"],"kind":"struct"},"2:40312:2280":{"crate_id":2,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"6:3919:11870":{"crate_id":6,"path":["libc","unix","bsd","apple","termios"],"kind":"struct"},"2:22190:8341":{"crate_id":2,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"6:3827:11863":{"crate_id":6,"path":["libc","unix","bsd","apple","if_msghdr"],"kind":"struct"},"6:5173:12096":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","x86_64","__darwin_x86_thread_state64"],"kind":"struct"},"1:4013:2470":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt"],"kind":"trait"},"2:42827:75":{"crate_id":2,"path":["core","fmt","Arguments"],"kind":"struct"},"15:327:12359":{"crate_id":15,"path":["addr2line","RangeAttributes"],"kind":"struct"},"1:3911:2463":{"crate_id":1,"path":["std","os","unix","ffi","os_str","OsStrExt"],"kind":"trait"},"1:5579:2591":{"crate_id":1,"path":["std","sync","condvar","Condvar"],"kind":"struct"},"1:5770:2602":{"crate_id":1,"path":["std","sync","mpmc","counter","Sender"],"kind":"struct"},"2:7492:8221":{"crate_id":2,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"2:40135:8047":{"crate_id":2,"path":["core","char","ToUppercase"],"kind":"struct"},"17:11535:13529":{"crate_id":17,"path":["object","read","SymbolMap"],"kind":"struct"},"5:6915:272":{"crate_id":5,"path":["alloc","vec","Vec"],"kind":"struct"},"2:4211:2126":{"crate_id":2,"path":["core","cell","Cell"],"kind":"struct"},"9:177:12255":{"crate_id":9,"path":["miniz_oxide","inflate","stream","InflateState"],"kind":"struct"},"1:4421:2512":{"crate_id":1,"path":["std","os","unix","thread","JoinHandleExt"],"kind":"trait"},"2:40175:104":{"crate_id":2,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"6:3591:11843":{"crate_id":6,"path":["libc","unix","bsd","apple","ip_mreq"],"kind":"struct"},"2:42360:2588":{"crate_id":2,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"2:47911:2689":{"crate_id":2,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"2:47553:2677":{"crate_id":2,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"2:40910:8218":{"crate_id":2,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"2:7571:126":{"crate_id":2,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"17:11111:13724":{"crate_id":17,"path":["object","read","pe","section","PeSegment"],"kind":"struct"},"9:0:1880":{"crate_id":9,"path":["miniz_oxide"],"kind":"module"},"16:4774:13050":{"crate_id":16,"path":["gimli","constants","DwId"],"kind":"struct"},"2:42019:91":{"crate_id":2,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"5:3802:2234":{"crate_id":5,"path":["alloc","collections","linked_list","ExtractIf"],"kind":"struct"},"2:48109:7820":{"crate_id":2,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"2:43571:7908":{"crate_id":2,"path":["core","slice","iter","RChunks"],"kind":"struct"},"6:4938:11955":{"crate_id":6,"path":["libc","unix","bsd","apple","__c_anonymous_ifc_ifcu"],"kind":"union"},"1:2604:2407":{"crate_id":1,"path":["std","io","buffered","bufwriter","WriterPanicked"],"kind":"struct"},"11:1010:2244":{"crate_id":11,"path":["hashbrown","map","OccupiedEntry"],"kind":"struct"},"17:10265:13597":{"crate_id":17,"path":["object","read","elf","section","ElfSectionIterator"],"kind":"struct"},"2:40390:23789":{"crate_id":2,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"2:7496:8220":{"crate_id":2,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:10129:2422":{"crate_id":1,"path":["std","sys","unix","stdio","Stderr"],"kind":"struct"},"18:0:1888":{"crate_id":18,"path":["memchr"],"kind":"module"},"17:13040:17088":{"crate_id":17,"path":["object","macho","EncryptionInfoCommand32"],"kind":"struct"},"1:11118:12363":{"crate_id":1,"path":["std","backtrace_rs","backtrace","Frame"],"kind":"struct"},"16:3655:12440":{"crate_id":16,"path":["gimli","arch","X86_64"],"kind":"struct"},"16:4835:13063":{"crate_id":16,"path":["gimli","constants","DwInl"],"kind":"struct"},"2:48060:7817":{"crate_id":2,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:8326:2229":{"crate_id":1,"path":["std","path","Iter"],"kind":"struct"},"1:7540:2248":{"crate_id":1,"path":["std","collections","hash","map","DefaultHasher"],"kind":"struct"},"16:6929:13388":{"crate_id":16,"path":["gimli","read","loclists","LocationLists"],"kind":"struct"},"5:7437:24231":{"crate_id":5,"path":["alloc","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"5:1516:218":{"crate_id":5,"path":["alloc","collections","btree","map","Range"],"kind":"struct"},"17:9445:13515":{"crate_id":17,"path":["object","read","any","SegmentIterator"],"kind":"struct"},"17:9921:13575":{"crate_id":17,"path":["object","read","coff","file","CoffCommon"],"kind":"struct"},"2:2776:245":{"crate_id":2,"path":["core","marker","Send"],"kind":"trait"},"6:4830:11945":{"crate_id":6,"path":["libc","unix","bsd","apple","vm_statistics64"],"kind":"struct"},"1:5552:2590":{"crate_id":1,"path":["std","sync","barrier","BarrierWaitResult"],"kind":"struct"},"2:21151:2653":{"crate_id":2,"path":["core","core_simd","cast","SimdCast"],"kind":"trait"},"2:2948:8289":{"crate_id":2,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"5:5376:7885":{"crate_id":5,"path":["alloc","slice","Join"],"kind":"trait"},"1:8033:2449":{"crate_id":1,"path":["std","net","tcp","IntoIncoming"],"kind":"struct"},"2:32084:2572":{"crate_id":2,"path":["core","convert","Infallible"],"kind":"enum"},"2:39613:18337":{"crate_id":2,"path":["core","ascii","ascii_char","AsciiChar"],"kind":"enum"},"16:6844:13384":{"crate_id":16,"path":["gimli","read","line","FileEntry"],"kind":"struct"},"2:2939:8287":{"crate_id":2,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"17:14420:17874":{"crate_id":17,"path":["object","pe","ImageDebugDirectory"],"kind":"struct"},"5:1290:2244":{"crate_id":5,"path":["alloc","collections","btree","map","entry","OccupiedEntry"],"kind":"struct"},"17:12452:17053":{"crate_id":17,"path":["object","macho","DyldSubCacheInfo"],"kind":"struct"},"6:4537:11920":{"crate_id":6,"path":["libc","unix","bsd","apple","attrreference_t"],"kind":"struct"},"5:7490:251":{"crate_id":5,"path":["alloc","string","String"],"kind":"struct"},"6:4238:11896":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_standard_policy"],"kind":"struct"},"1:1076:2246":{"crate_id":1,"path":["std","collections","hash","map","OccupiedError"],"kind":"struct"},"17:11710:13536":{"crate_id":17,"path":["object","read","Relocation"],"kind":"struct"},"17:13274:13536":{"crate_id":17,"path":["object","macho","Relocation"],"kind":"struct"},"5:1275:2245":{"crate_id":5,"path":["alloc","collections","btree","map","entry","VacantEntry"],"kind":"struct"},"17:12724:17068":{"crate_id":17,"path":["object","macho","SubUmbrellaCommand"],"kind":"struct"},"2:46353:2736":{"crate_id":2,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"6:4256:11899":{"crate_id":6,"path":["libc","unix","bsd","apple","thread_precedence_policy"],"kind":"struct"},"2:40877:8214":{"crate_id":2,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"5:7574:2234":{"crate_id":5,"path":["alloc","vec","extract_if","ExtractIf"],"kind":"struct"},"6:4337:11908":{"crate_id":6,"path":["libc","unix","bsd","apple","vnode_info"],"kind":"struct"},"2:10478:2406":{"crate_id":2,"path":["core","slice","iter","Split"],"kind":"struct"},"5:678:258":{"crate_id":5,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"17:10916:13669":{"crate_id":17,"path":["object","read","macho","segment","MachOSegment"],"kind":"struct"},"16:6901:13386":{"crate_id":16,"path":["gimli","read","loclists","DebugLoc"],"kind":"struct"},"6:1037:9538":{"crate_id":6,"path":["libc","unix","bsd","ifaddrs"],"kind":"struct"},"16:5963:13348":{"crate_id":16,"path":["gimli","read","cfi","UnwindTable"],"kind":"struct"},"16:5634:13334":{"crate_id":16,"path":["gimli","read","cfi","ParsedEhFrameHdr"],"kind":"struct"},"10:0:1881":{"crate_id":10,"path":["adler"],"kind":"module"},"6:4281:11904":{"crate_id":6,"path":["libc","unix","bsd","apple","malloc_statistics_t"],"kind":"struct"},"1:1983:205":{"crate_id":1,"path":["std","ffi","os_str","OsString"],"kind":"struct"},"16:6156:13353":{"crate_id":16,"path":["gimli","read","cfi","CallFrameInstructionIter"],"kind":"struct"},"2:45706:2666":{"crate_id":2,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"18:681:17914":{"crate_id":18,"path":["memchr","memmem","Finder"],"kind":"struct"},"16:2933:12431":{"crate_id":16,"path":["gimli","common","UnitSectionOffset"],"kind":"enum"},"1:11462:1002":{"crate_id":1,"path":["std","never"],"kind":"primitive"},"1:2568:2415":{"crate_id":1,"path":["std","io","buffered","bufwriter","BufWriter"],"kind":"struct"},"2:45830:2703":{"crate_id":2,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"1:10494:2564":{"crate_id":1,"path":["std","sys","unix","process","process_common","Stdio"],"kind":"enum"},"2:2786:253":{"crate_id":2,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"11:2260:2244":{"crate_id":11,"path":["hashbrown","table","OccupiedEntry"],"kind":"struct"},"1:6156:183":{"crate_id":1,"path":["std","sync","mutex","Mutex"],"kind":"struct"},"1:8765:2178":{"crate_id":1,"path":["std","sync","mpmc","context","Inner"],"kind":"struct"},"5:824:2254":{"crate_id":5,"path":["alloc","collections","binary_heap","RebuildOnDrop"],"kind":"struct"},"5:2225:27529":{"crate_id":5,"path":["alloc","collections","btree","navigate","LazyLeafHandle"],"kind":"enum"},"16:6352:13362":{"crate_id":16,"path":["gimli","read","abbrev","Abbreviations"],"kind":"struct"},"2:44447:8532":{"crate_id":2,"path":["core","time","Nanoseconds"],"kind":"struct"},"17:13202:17099":{"crate_id":17,"path":["object","macho","SourceVersionCommand"],"kind":"struct"},"1:8795:21228":{"crate_id":1,"path":["std","sync","mpmc","list","Position"],"kind":"struct"},"1:5230:2563":{"crate_id":1,"path":["std","process","ChildStderr"],"kind":"struct"},"1:641:2208":{"crate_id":1,"path":["std","backtrace","BacktraceSymbol"],"kind":"struct"},"17:9660:29613":{"crate_id":17,"path":["object","read","any","SymbolTableInternal"],"kind":"enum"},"2:4023:263":{"crate_id":2,"path":["core","asserting","TryCaptureGeneric"],"kind":"trait"},"6:5148:12093":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","x86_64","ucontext_t"],"kind":"struct"},"1:11476:798":{"crate_id":1,"path":["std","i16"],"kind":"primitive"},"5:7504:7969":{"crate_id":5,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"17:8686:13499":{"crate_id":17,"path":["object","common","BinaryFormat"],"kind":"enum"},"1:9585:20248":{"crate_id":1,"path":["std","sys","unix","net","Socket"],"kind":"struct"},"2:21551:2377":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"1:11429:21505":{"crate_id":1,"path":["std","backtrace_rs","symbolize","gimli","Cache"],"kind":"struct"},"5:1120:25913":{"crate_id":5,"path":["alloc","collections","btree","borrow","DormantMutRef"],"kind":"struct"},"17:11473:13526":{"crate_id":17,"path":["object","read","SectionIndex"],"kind":"struct"},"1:7396:20892":{"crate_id":1,"path":["std","backtrace_rs","Bomb"],"kind":"struct"},"1:8928:2636":{"crate_id":1,"path":["std","time","SystemTimeError"],"kind":"struct"},"1:8583:206":{"crate_id":1,"path":["std","process","Output"],"kind":"struct"},"17:10197:13613":{"crate_id":17,"path":["object","read","elf","file","ElfFile"],"kind":"struct"},"17:12465:13713":{"crate_id":17,"path":["object","macho","FatHeader"],"kind":"struct"},"1:589:2201":{"crate_id":1,"path":["std","ascii","AsciiExt"],"kind":"trait"},"17:13922:17837":{"crate_id":17,"path":["object","pe","ImageArchiveMemberHeader"],"kind":"struct"},"2:4021:8429":{"crate_id":2,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"17:9985:13558":{"crate_id":17,"path":["object","read","coff","section","CoffSectionIterator"],"kind":"struct"},"5:3570:180":{"crate_id":5,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:6395:2600":{"crate_id":1,"path":["std","sync","remutex","ReentrantMutex"],"kind":"struct"},"6:548:9141":{"crate_id":6,"path":["libc","unix","pollfd"],"kind":"struct"},"16:7736:13416":{"crate_id":16,"path":["gimli","read","UnitOffset"],"kind":"struct"},"2:11737:8478":{"crate_id":2,"path":["core","slice","GetManyMutError"],"kind":"struct"},"16:8072:13424":{"crate_id":16,"path":["gimli","read","unit","AttrsIter"],"kind":"struct"},"2:6962:8228":{"crate_id":2,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"6:4479:11917":{"crate_id":6,"path":["libc","unix","bsd","apple","rusage_info_v4"],"kind":"struct"},"2:21805:2662":{"crate_id":2,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"11:2238:2243":{"crate_id":11,"path":["hashbrown","table","Entry"],"kind":"enum"},"17:8659:13479":{"crate_id":17,"path":["object","common","AddressSize"],"kind":"enum"},"17:13685:17821":{"crate_id":17,"path":["object","pe","ImageRomHeaders"],"kind":"struct"},"2:40404:8235":{"crate_id":2,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"11:0:1882":{"crate_id":11,"path":["hashbrown"],"kind":"module"},"1:4025:2473":{"crate_id":1,"path":["std","os","unix","fs","DirBuilderExt"],"kind":"trait"},"2:2909:8280":{"crate_id":2,"path":["core","ops","bit","BitOr"],"kind":"trait"},"2:44630:215":{"crate_id":2,"path":["core","task","poll","Poll"],"kind":"enum"},"16:0:1886":{"crate_id":16,"path":["gimli"],"kind":"module"},"1:7691:135":{"crate_id":1,"path":["std","fs","FileType"],"kind":"struct"},"1:4017:2471":{"crate_id":1,"path":["std","os","unix","fs","DirEntryExt2"],"kind":"trait"},"17:11687:13535":{"crate_id":17,"path":["object","read","RelocationTarget"],"kind":"enum"},"1:3260:2422":{"crate_id":1,"path":["std","io","stdio","Stderr"],"kind":"struct"},"6:4146:11886":{"crate_id":6,"path":["libc","unix","bsd","apple","in_pktinfo"],"kind":"struct"},"17:10340:13600":{"crate_id":17,"path":["object","read","elf","symbol","ElfSymbol"],"kind":"struct"},"2:44612:227":{"crate_id":2,"path":["core","future","ready","Ready"],"kind":"struct"},"6:3887:11868":{"crate_id":6,"path":["libc","unix","bsd","apple","rt_msghdr"],"kind":"struct"},"2:44686:178":{"crate_id":2,"path":["core","alloc","layout","Layout"],"kind":"struct"},"17:10084:13556":{"crate_id":17,"path":["object","read","coff","comdat","CoffComdatIterator"],"kind":"struct"},"16:6687:13379":{"crate_id":16,"path":["gimli","read","line","LineInstructions"],"kind":"struct"},"6:1069:9541":{"crate_id":6,"path":["libc","unix","bsd","msghdr"],"kind":"struct"},"17:11023:13672":{"crate_id":17,"path":["object","read","macho","symbol","MachOSymbol"],"kind":"struct"},"2:3261:8008":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"2:2547:266":{"crate_id":2,"path":["core","convert","TryInto"],"kind":"trait"},"17:12136:16564":{"crate_id":17,"path":["object","elf","ProgramHeader32"],"kind":"struct"},"2:2499:8065":{"crate_id":2,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"16:6017:13351":{"crate_id":16,"path":["gimli","read","cfi","CfaRule"],"kind":"enum"},"17:10738:13709":{"crate_id":17,"path":["object","read","macho","file","MachOComdatSectionIterator"],"kind":"struct"},"2:4054:274":{"crate_id":2,"path":["core","asserting","Wrapper"],"kind":"struct"},"17:9701:13520":{"crate_id":17,"path":["object","read","any","SymbolIterator"],"kind":"struct"},"17:14514:17881":{"crate_id":17,"path":["object","pe","ImageArchitectureEntry"],"kind":"struct"},"16:5322:13310":{"crate_id":16,"path":["gimli","constants","DwOp"],"kind":"struct"},"5:629:26947":{"crate_id":5,"path":["alloc","boxed","from","StringError"],"kind":"struct"},"2:9086:82":{"crate_id":2,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"1:11464:1632":{"crate_id":1,"path":["std","unit"],"kind":"primitive"},"2:40161:8044":{"crate_id":2,"path":["core","char","TryFromCharError"],"kind":"struct"},"2:40029:8050":{"crate_id":2,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"17:504:13497":{"crate_id":17,"path":["object","read","any","Comdat"],"kind":"struct"},"1:534:2179":{"crate_id":1,"path":["std","thread","Packet"],"kind":"struct"},"6:3747:11856":{"crate_id":6,"path":["libc","unix","bsd","apple","ftrimactivefile_t"],"kind":"struct"},"11:817:2235":{"crate_id":11,"path":["hashbrown","map","ValuesMut"],"kind":"struct"},"2:46375:2742":{"crate_id":2,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:505:2174":{"crate_id":1,"path":["std","thread","PanicGuard"],"kind":"struct"},"1:10123:2424":{"crate_id":1,"path":["std","sys","unix","stdio","Stdin"],"kind":"struct"},"2:1923:7854":{"crate_id":2,"path":["core","ptr","unique","Unique"],"kind":"struct"},"6:4716:11935":{"crate_id":6,"path":["libc","unix","bsd","apple","processor_cpu_load_info"],"kind":"struct"},"6:5137:12090":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","pthread_attr_t"],"kind":"struct"},"1:11463:453":{"crate_id":1,"path":["std","char"],"kind":"primitive"},"2:47021:2688":{"crate_id":2,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"2:22996:190":{"crate_id":2,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"5:5634:7991":{"crate_id":5,"path":["alloc","string","retain","SetLenOnDrop"],"kind":"struct"},"17:11586:13532":{"crate_id":17,"path":["object","read","ObjectMapEntry"],"kind":"struct"},"1:0:1502":{"crate_id":1,"path":["std"],"kind":"module"},"2:43488:7904":{"crate_id":2,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"2:9875:8071":{"crate_id":2,"path":["core","hash","BuildHasher"],"kind":"trait"},"16:3764:12448":{"crate_id":16,"path":["gimli","constants","DwSect"],"kind":"struct"},"1:2394:2363":{"crate_id":1,"path":["std","fs","read_dir"],"kind":"function"},"17:10788:13710":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandVariant"],"kind":"enum"},"17:9531:29614":{"crate_id":17,"path":["object","read","any","SectionIteratorInternal"],"kind":"enum"},"17:13966:17839":{"crate_id":17,"path":["object","pe","ImageImportByName"],"kind":"struct"},"6:5307:12105":{"crate_id":6,"path":["libc","unix","align","in6_addr"],"kind":"struct"},"1:1817:2299":{"crate_id":1,"path":["std","env","SplitPaths"],"kind":"struct"},"6:0:880":{"crate_id":6,"path":["libc"],"kind":"module"},"17:10383:13593":{"crate_id":17,"path":["object","read","elf","comdat","ElfComdat"],"kind":"struct"},"15:394:12366":{"crate_id":15,"path":["addr2line","DebugFile"],"kind":"enum"},"2:2897:8282":{"crate_id":2,"path":["core","ops","bit","Not"],"kind":"trait"},"1:2895:17959":{"crate_id":1,"path":["std","io","error","repr_bitpacked","Repr"],"kind":"struct"},"1:2366:2352":{"crate_id":1,"path":["std","fs","metadata"],"kind":"function"},"2:2850:2639":{"crate_id":2,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:9936:17967":{"crate_id":1,"path":["std","sys","unix","process","process_common","Argv"],"kind":"struct"},"17:12086:16560":{"crate_id":17,"path":["object","elf","Rel32"],"kind":"struct"},"2:12216:7922":{"crate_id":2,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"2:20998:25497":{"crate_id":2,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:11467:342":{"crate_id":1,"path":["std","array"],"kind":"primitive"},"2:43678:2405":{"crate_id":2,"path":["core","str","iter","Bytes"],"kind":"struct"},"5:3240:2252":{"crate_id":5,"path":["alloc","collections","btree","set","Union"],"kind":"struct"},"17:10534:13623":{"crate_id":17,"path":["object","read","elf","version","VerneedIterator"],"kind":"struct"},"16:2596:12417":{"crate_id":16,"path":["gimli","common","DebugLocListsIndex"],"kind":"struct"},"17:14126:17856":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation64"],"kind":"struct"},"2:21800:2654":{"crate_id":2,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"5:3722:2269":{"crate_id":5,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"2:42496:7867":{"crate_id":2,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:4343:2495":{"crate_id":1,"path":["std","os","unix","process","ExitStatusExt"],"kind":"trait"},"2:12988:111":{"crate_id":2,"path":["core","task","wake","Context"],"kind":"struct"},"2:12999:2784":{"crate_id":2,"path":["core","task","wake","Waker"],"kind":"struct"},"2:22334:8393":{"crate_id":2,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"16:5017:13101":{"crate_id":16,"path":["gimli","constants","DwLne"],"kind":"struct"},"2:42058:85":{"crate_id":2,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"17:12621:17061":{"crate_id":17,"path":["object","macho","Section64"],"kind":"struct"},"16:8115:13426":{"crate_id":16,"path":["gimli","read","unit","EntriesCursor"],"kind":"struct"},"6:3782:11859":{"crate_id":6,"path":["libc","unix","bsd","apple","Dl_info"],"kind":"struct"},"1:11483:1615":{"crate_id":1,"path":["std","u64"],"kind":"primitive"},"1:8166:2530":{"crate_id":1,"path":["std","panic","BacktraceStyle"],"kind":"enum"},"17:14448:17876":{"crate_id":17,"path":["object","pe","ImageDebugMisc"],"kind":"struct"},"1:8107:2521":{"crate_id":1,"path":["std","os","macos","raw","stat"],"kind":"struct"},"1:10861:18200":{"crate_id":1,"path":["std","sys_common","wtf8","Wtf8Buf"],"kind":"struct"},"1:10527:2571":{"crate_id":1,"path":["std","sys","unix","process","process_common","ExitCode"],"kind":"struct"},"17:14346:17870":{"crate_id":17,"path":["object","pe","ImageRuntimeFunctionEntry"],"kind":"struct"},"1:5961:20874":{"crate_id":1,"path":["std","sync","mpmc","waker","SyncWaker"],"kind":"struct"},"2:43692:2406":{"crate_id":2,"path":["core","str","iter","Split"],"kind":"struct"},"1:2930:133":{"crate_id":1,"path":["std","io","error","Error"],"kind":"struct"},"1:955:2242":{"crate_id":1,"path":["std","collections","hash","map","RawEntryBuilder"],"kind":"struct"},"16:2969:12432":{"crate_id":16,"path":["gimli","common","SectionId"],"kind":"enum"},"1:913:2235":{"crate_id":1,"path":["std","collections","hash","map","ValuesMut"],"kind":"struct"},"17:400:13496":{"crate_id":17,"path":["object","read","any","Segment"],"kind":"struct"},"1:11478:800":{"crate_id":1,"path":["std","i64"],"kind":"primitive"},"2:3255:8009":{"crate_id":2,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"14:215:12339":{"crate_id":14,"path":["rustc_demangle","TryDemangleError"],"kind":"struct"},"17:14469:17878":{"crate_id":17,"path":["object","pe","ImageFunctionEntry64"],"kind":"struct"},"6:4446:11916":{"crate_id":6,"path":["libc","unix","bsd","apple","rusage_info_v3"],"kind":"struct"},"17:13632:17818":{"crate_id":17,"path":["object","pe","ImageOptionalHeader64"],"kind":"struct"},"17:10227:13598":{"crate_id":17,"path":["object","read","elf","segment","ElfSegment"],"kind":"struct"},"16:2670:12420":{"crate_id":16,"path":["gimli","common","RawRangeListsOffset"],"kind":"struct"},"17:13949:17838":{"crate_id":17,"path":["object","pe","ImageExportDirectory"],"kind":"struct"},"2:9840:155":{"crate_id":2,"path":["core","hash","Hasher"],"kind":"trait"},"17:9372:13514":{"crate_id":17,"path":["object","read","util","StringTable"],"kind":"struct"},"2:9278:25471":{"crate_id":2,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:8875:184":{"crate_id":1,"path":["std","sync","mutex","MutexGuard"],"kind":"struct"},"2:32138:8022":{"crate_id":2,"path":["core","error","tags","Ref"],"kind":"struct"},"17:1075:13562":{"crate_id":17,"path":["object","read","coff","symbol","CoffSymbolIterator"],"kind":"struct"},"1:3812:2453":{"crate_id":1,"path":["std","net","udp","UdpSocket"],"kind":"struct"},"2:7680:176":{"crate_id":2,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"5:207:7857":{"crate_id":5,"path":["alloc","boxed","thin","ThinBox"],"kind":"struct"},"1:7802:21224":{"crate_id":1,"path":["std","io","error","SimpleMessage"],"kind":"struct"},"11:680:2230":{"crate_id":11,"path":["hashbrown","map","IterMut"],"kind":"struct"},"1:10126:2426":{"crate_id":1,"path":["std","sys","unix","stdio","Stdout"],"kind":"struct"},"11:2334:2230":{"crate_id":11,"path":["hashbrown","table","IterMut"],"kind":"struct"},"2:22798:196":{"crate_id":2,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:10399:20836":{"crate_id":1,"path":["std","sys","unix","locks","pthread_mutex","PthreadMutexAttr"],"kind":"struct"},"18:719:17909":{"crate_id":18,"path":["memchr","memmem","NeedleInfo"],"kind":"struct"},"2:40192:24231":{"crate_id":2,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"6:489:9134":{"crate_id":6,"path":["libc","unix","timeval"],"kind":"struct"},"6:4593:11926":{"crate_id":6,"path":["libc","unix","bsd","apple","shmid_ds"],"kind":"struct"},"2:41801:213":{"crate_id":2,"path":["core","pin","Pin"],"kind":"struct"},"5:3173:2229":{"crate_id":5,"path":["alloc","collections","btree","set","Iter"],"kind":"struct"},"6:3723:11853":{"crate_id":6,"path":["libc","unix","bsd","apple","stack_t"],"kind":"struct"},"2:11751:7931":{"crate_id":2,"path":["core","str","converts","from_utf8"],"kind":"function"},"2:3171:219":{"crate_id":2,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"1:10509:20642":{"crate_id":1,"path":["std","sys","unix","process","process_common","ProgramKind"],"kind":"enum"},"16:6268:28909":{"crate_id":16,"path":["gimli","read","dwarf","RangeIterInner"],"kind":"enum"},"5:2961:2101":{"crate_id":5,"path":["alloc","collections","btree","node","marker","Owned"],"kind":"enum"},"2:7542:2020":{"crate_id":2,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:840:2229":{"crate_id":1,"path":["std","collections","hash","map","Iter"],"kind":"struct"},"1:897:2233":{"crate_id":1,"path":["std","collections","hash","map","Drain"],"kind":"struct"},"1:2219:2348":{"crate_id":1,"path":["std","fs","read"],"kind":"function"},"1:10305:20274":{"crate_id":1,"path":["std","sys","unix","fs","FileAttr"],"kind":"struct"},"16:5363:13327":{"crate_id":16,"path":["gimli","constants","DwEhPe"],"kind":"struct"},"18:599:29643":{"crate_id":18,"path":["memchr","memmem","twoway","Shift"],"kind":"enum"},"6:3597:11844":{"crate_id":6,"path":["libc","unix","bsd","apple","ip_mreqn"],"kind":"struct"},"1:5545:2589":{"crate_id":1,"path":["std","sync","barrier","Barrier"],"kind":"struct"},"17:12373:17050":{"crate_id":17,"path":["object","macho","DyldCacheHeader"],"kind":"struct"},"1:9702:21269":{"crate_id":1,"path":["std","sys","unix","os","EnvStrDebug"],"kind":"struct"},"17:13135:17094":{"crate_id":17,"path":["object","macho","LinkerOptionCommand"],"kind":"struct"},"2:44113:7959":{"crate_id":2,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"2:44281:7966":{"crate_id":2,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"6:4384:11913":{"crate_id":6,"path":["libc","unix","bsd","apple","rusage_info_v0"],"kind":"struct"},"1:6096:228":{"crate_id":1,"path":["std","sync","mpmc","Receiver"],"kind":"struct"},"2:43580:7911":{"crate_id":2,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:6824:19748":{"crate_id":1,"path":["std","sys_common","lazy_box","LazyBox"],"kind":"struct"},"2:20983:25300":{"crate_id":2,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"2:46551:24406":{"crate_id":2,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"2:46001:2686":{"crate_id":2,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:1573:2249":{"crate_id":1,"path":["std","collections","hash","set","Intersection"],"kind":"struct"},"5:5138:2587":{"crate_id":5,"path":["alloc","rc","Weak"],"kind":"struct"},"17:10494:13624":{"crate_id":17,"path":["object","read","elf","version","VersionTable"],"kind":"struct"},"11:2058:2243":{"crate_id":11,"path":["hashbrown","set","Entry"],"kind":"enum"},"16:5905:13346":{"crate_id":16,"path":["gimli","read","cfi","FrameDescriptionEntry"],"kind":"struct"},"17:12576:17059":{"crate_id":17,"path":["object","macho","SegmentCommand64"],"kind":"struct"},"6:5129:12089":{"crate_id":6,"path":["libc","unix","bsd","apple","b64","bpf_hdr"],"kind":"struct"},"1:8332:2553":{"crate_id":1,"path":["std","path","Ancestors"],"kind":"struct"},"2:2670:2325":{"crate_id":2,"path":["core","error","Request"],"kind":"struct"},"5:7286:2041":{"crate_id":5,"path":["alloc","collections","btree","set","IntoIter"],"kind":"struct"},"17:11062:13750":{"crate_id":17,"path":["object","read","pe","file","PeComdatIterator"],"kind":"struct"},"2:46631:2704":{"crate_id":2,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"6:4658:11929":{"crate_id":6,"path":["libc","unix","bsd","apple","pthread_rwlock_t"],"kind":"struct"},"2:5562:2388":{"crate_id":2,"path":["core","iter","adapters","filter_map","next_chunk","Guard"],"kind":"struct"},"11:1869:2250":{"crate_id":11,"path":["hashbrown","set","Difference"],"kind":"struct"},"2:48014:7813":{"crate_id":2,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:3147:22100":{"crate_id":1,"path":["std","io","stdio","StdoutRaw"],"kind":"struct"},"17:9650:13519":{"crate_id":17,"path":["object","read","any","SymbolTable"],"kind":"struct"},"17:14536:17883":{"crate_id":17,"path":["object","pe","ImageCor20Header"],"kind":"struct"},"16:5939:13347":{"crate_id":16,"path":["gimli","read","cfi","UnwindContext"],"kind":"struct"},"17:8713:13500":{"crate_id":17,"path":["object","common","SectionKind"],"kind":"enum"},"2:2845:2637":{"crate_id":2,"path":["core","ops","arith","Add"],"kind":"trait"},"17:9102:13484":{"crate_id":17,"path":["object","endian","U16Bytes"],"kind":"struct"},"17:10410:13614":{"crate_id":17,"path":["object","read","elf","note","NoteIterator"],"kind":"struct"},"2:8511:8294":{"crate_id":2,"path":["core","option","SpecOptionPartialEq"],"kind":"trait"},"17:12267:16573":{"crate_id":17,"path":["object","elf","NoteHeader32"],"kind":"struct"},"2:44622:235":{"crate_id":2,"path":["core","future","ResumeTy"],"kind":"struct"},"5:7406:105":{"crate_id":5,"path":["alloc","ffi","c_str","CString"],"kind":"struct"},"17:13554:17814":{"crate_id":17,"path":["object","pe","ImageFileHeader"],"kind":"struct"},"1:8001:2404":{"crate_id":1,"path":["std","io","Take"],"kind":"struct"},"18:636:29631":{"crate_id":18,"path":["memchr","memmem","twoway","ApproximateByteSet"],"kind":"struct"},"5:7302:26933":{"crate_id":5,"path":["alloc","collections","btree","set_val","SetValZST"],"kind":"struct"},"2:40433:8237":{"crate_id":2,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"17:13897:17834":{"crate_id":17,"path":["object","pe","ImageRelocation"],"kind":"struct"},"16:5727:13340":{"crate_id":16,"path":["gimli","read","cfi","SectionBaseAddresses"],"kind":"struct"},"1:8343:2554":{"crate_id":1,"path":["std","path","StripPrefixError"],"kind":"struct"},"1:11482:1614":{"crate_id":1,"path":["std","u32"],"kind":"primitive"},"16:6583:13377":{"crate_id":16,"path":["gimli","read","line","LineRows"],"kind":"struct"},"2:47741:2683":{"crate_id":2,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:8257:2550":{"crate_id":1,"path":["std","path","PrefixComponent"],"kind":"struct"},"14:7:12330":{"crate_id":14,"path":["rustc_demangle","legacy","Demangle"],"kind":"struct"},"17:11639:13534":{"crate_id":17,"path":["object","read","Export"],"kind":"struct"},"1:3376:2388":{"crate_id":1,"path":["std","io","Guard"],"kind":"struct"},"17:12196:16568":{"crate_id":17,"path":["object","elf","Versym"],"kind":"struct"},"5:4034:27033":{"crate_id":5,"path":["alloc","collections","vec_deque","drain","drop","DropGuard"],"kind":"struct"},"2:22930:188":{"crate_id":2,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"1:4173:2492":{"crate_id":1,"path":["std","os","unix","net","listener","UnixListener"],"kind":"struct"},"1:5438:2603":{"crate_id":1,"path":["std","sync","mpsc","SyncSender"],"kind":"struct"},"16:3232:12436":{"crate_id":16,"path":["gimli","arch","AArch64"],"kind":"struct"},"17:13162:17096":{"crate_id":17,"path":["object","macho","IdentCommand"],"kind":"struct"},"2:41902:87":{"crate_id":2,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:8909:2381":{"crate_id":1,"path":["std","time","SystemTime"],"kind":"struct"},"1:3486:2397":{"crate_id":1,"path":["std","io","BufRead"],"kind":"trait"},"16:7067:28528":{"crate_id":16,"path":["gimli","read","lookup","PubStuffHeader"],"kind":"struct"},"5:7294:218":{"crate_id":5,"path":["alloc","collections","btree","set","Range"],"kind":"struct"},"17:12074:16559":{"crate_id":17,"path":["object","elf","Syminfo64"],"kind":"struct"},"17:10214:13599":{"crate_id":17,"path":["object","read","elf","segment","ElfSegmentIterator"],"kind":"struct"},"16:5088:13124":{"crate_id":16,"path":["gimli","constants","DwMacro"],"kind":"struct"},"1:7938:2431":{"crate_id":1,"path":["std","io","util","Empty"],"kind":"struct"},"1:2384:2358":{"crate_id":1,"path":["std","fs","canonicalize"],"kind":"function"},"16:6569:13376":{"crate_id":16,"path":["gimli","read","line","DebugLine"],"kind":"struct"},"1:5945:2784":{"crate_id":1,"path":["std","sync","mpmc","waker","Waker"],"kind":"struct"},"11:423:28460":{"crate_id":11,"path":["hashbrown","raw","RawIterHash"],"kind":"struct"},"6:4208:11894":{"crate_id":6,"path":["libc","unix","bsd","apple","timex"],"kind":"struct"},"5:3596:2230":{"crate_id":5,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"18:614:29640":{"crate_id":18,"path":["memchr","memmem","twoway","SuffixKind"],"kind":"enum"},"2:2787:252":{"crate_id":2,"path":["core","marker","StructuralEq"],"kind":"trait"},"17:11261:13747":{"crate_id":17,"path":["object","read","pe","import","DelayLoadImportTable"],"kind":"struct"},"6:1308:9681":{"crate_id":6,"path":["libc","unix","bsd","apple","sysdir_search_path_directory_t"],"kind":"enum"},"16:8097:13425":{"crate_id":16,"path":["gimli","read","unit","EntriesRaw"],"kind":"struct"},"1:8815:13394":{"crate_id":1,"path":["std","sync","mpmc","select","Operation"],"kind":"struct"},"2:3274:24760":{"crate_id":2,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"16:6467:13370":{"crate_id":16,"path":["gimli","read","aranges","ArangeEntry"],"kind":"struct"},"6:4032:11876":{"crate_id":6,"path":["libc","unix","bsd","apple","xsw_usage"],"kind":"struct"},"1:7460:2184":{"crate_id":1,"path":["std","thread","Builder"],"kind":"struct"},"17:14134:17857":{"crate_id":17,"path":["object","pe","ImageDynamicRelocation32V2"],"kind":"struct"},"18:507:29632":{"crate_id":18,"path":["memchr","memmem","genericsimd","Forward"],"kind":"struct"},"17:14100:17853":{"crate_id":17,"path":["object","pe","ImageLoadConfigCodeIntegrity"],"kind":"struct"},"1:2409:1895":{"crate_id":1,"path":["std","io"],"kind":"module"},"14:165:12331":{"crate_id":14,"path":["rustc_demangle","DemangleStyle"],"kind":"enum"},"1:11475:801":{"crate_id":1,"path":["std","i8"],"kind":"primitive"},"5:2172:27167":{"crate_id":5,"path":["alloc","collections","btree","navigate","LeafRange"],"kind":"struct"},"17:10292:13519":{"crate_id":17,"path":["object","read","elf","symbol","SymbolTable"],"kind":"struct"},"1:3955:2466":{"crate_id":1,"path":["std","os","unix","fs","PermissionsExt"],"kind":"trait"},"17:10949:13666":{"crate_id":17,"path":["object","read","macho","section","MachOSection"],"kind":"struct"},"1:5039:210":{"crate_id":1,"path":["std","path","Path"],"kind":"struct"},"2:9880:8072":{"crate_id":2,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"16:5696:13338":{"crate_id":16,"path":["gimli","read","cfi","CieOffsetEncoding"],"kind":"enum"},"9:450:12150":{"crate_id":9,"path":["miniz_oxide","MZError"],"kind":"enum"},"2:39440:8004":{"crate_id":2,"path":["core","array","TryFromSliceError"],"kind":"struct"},"16:2284:12376":{"crate_id":16,"path":["gimli","common","Format"],"kind":"enum"},"2:13092:2258":{"crate_id":2,"path":["core","alloc","Allocator"],"kind":"trait"},"11:1092:12272":{"crate_id":11,"path":["hashbrown","map","OccupiedEntryRef"],"kind":"struct"},"18:113:17898":{"crate_id":18,"path":["memchr","memchr","iter","Memchr3"],"kind":"struct"},"5:780:99":{"crate_id":5,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"1:8672:2606":{"crate_id":1,"path":["std","sync","mpsc","RecvError"],"kind":"struct"},"6:4903:11952":{"crate_id":6,"path":["libc","unix","bsd","apple","ifkpi"],"kind":"struct"},"17:13215:17100":{"crate_id":17,"path":["object","macho","DataInCodeEntry"],"kind":"struct"},"1:9252:17961":{"crate_id":1,"path":["std","sys","unix","fs","Dir"],"kind":"struct"},"2:47987:2744":{"crate_id":2,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"2:10094:24799":{"crate_id":2,"path":["core","slice","sort","merge_sort","RunVec"],"kind":"struct"},"17:14056:17848":{"crate_id":17,"path":["object","pe","ImageResourceDirectory"],"kind":"struct"},"6:4186:11891":{"crate_id":6,"path":["libc","unix","bsd","apple","in_addr"],"kind":"struct"},"16:7862:13421":{"crate_id":16,"path":["gimli","read","unit","DebuggingInformationEntry"],"kind":"struct"},"2:3519:2233":{"crate_id":2,"path":["core","array","drain","Drain"],"kind":"struct"},"6:4558:11923":{"crate_id":6,"path":["libc","unix","bsd","apple","vol_attributes_attr_t"],"kind":"struct"},"2:21556:2647":{"crate_id":2,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"17:10771:13685":{"crate_id":17,"path":["object","read","macho","load_command","LoadCommandData"],"kind":"struct"},"17:11934:16551":{"crate_id":17,"path":["object","elf","Ident"],"kind":"struct"},"2:21472:2651":{"crate_id":2,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"17:10440:13650":{"crate_id":17,"path":["object","read","elf","note","GnuProperty"],"kind":"struct"},"17:12970:17083":{"crate_id":17,"path":["object","macho","PrebindCksumCommand"],"kind":"struct"}},"external_crates":{"17":{"name":"object","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"14":{"name":"rustc_demangle","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"11":{"name":"hashbrown","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"8":{"name":"cfg_if","html_root_url":"https://docs.rs/cfg-if/"},"5":{"name":"alloc","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"2":{"name":"core","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"19":{"name":"panic_unwind","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"16":{"name":"gimli","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"13":{"name":"std_detect","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"10":{"name":"adler","html_root_url":"https://docs.rs/adler/1.0.2/"},"7":{"name":"unwind","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"4":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"1":{"name":"std","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"18":{"name":"memchr","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"15":{"name":"addr2line","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"12":{"name":"rustc_std_workspace_alloc","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"9":{"name":"miniz_oxide","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"6":{"name":"libc","html_root_url":"https://doc.rust-lang.org/1.75.0/"},"3":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/1.75.0/"}},"format_version":27}